/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.channels.DatagramChannel;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.charset.Charset;
import java.util.Date;
import java.util.Iterator;
import java.util.Random;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

import sdk.Utility;
import Reader.ReaderAPI;

/**
 *
 * @author mt
 */
public class JDialogDemo extends javax.swing.JDialog {

    int hScanner[] = new int[1];
    int res;
    //static ReaderAPI Reader;

    int		m_Port;//Reader Port
    int		m_HostPort;//Host Port
    int ConnectMode		=	-1;//è¿žæŽ¥çš„æ¨¡å¼�,0---ç½‘å�£ï¼Œ1---RS232ï¼Œ2---RS485
    int ifConnectReader=	0;//è¯»å†™å™¨æ˜¯å�¦è¿žæŽ¥ï¼Œ1---è¿žæŽ¥,0---æ²¡æœ‰è¿žæŽ¥
    int NewConnect		=	0;
    int Address                 =       0;



    int nIDEvent = 1;//æ˜¯å“ªä¸ªäº‹IDå�·
    int mem=0;//å“ªä¸ªåŒº,EPC,TID,USER,PASSWORD
    int ptr=0;//ä»Žå“ªå„¿å¼€å§‹
    int len=0;//å�–å¤šé•¿
    int EPC_Word=0; //epc length
    int m_antenna_sel;
    byte[] AccessPassword = new byte[4];
    int[] gAntenna = new int[4];//add by mqs 20130710
    int iModAnt;	//é€‰ä¸­çš„ä¸ªæ•°
    int Read_times=0;
    int iPlatform	=	0;	//0---626, 1---218

    byte[][] EPCC1G2_IDBuffer = new byte[ReaderAPI.MAX_LABELS][ReaderAPI.ID_MAX_SIZE_96BIT];

    //å°†å­—ç¬¦ä¸²å�˜ä¸ºå­—èŠ‚æ•°ç»„
    byte[] mask = new byte[512];//æŽ©æŽª
    byte[] IDTemp = new byte[512];
    static int timer_interval=1000 ;//å®šæ—¶å™¨é—´éš”


    private MyTimer mytimer=new MyTimer();
    static boolean running = true;//å®šæ—¶å™¨ä½¿ç”¨

    DefaultListModel hlistModel=null;

    private MyTimerAuto mytimerAuto=new MyTimerAuto();
    private MyTimerSerialAuto mytimerSerialAuto=new MyTimerSerialAuto();
    int iTagNumber = 0;//autoä¸‹çš„tagçš„ä¸ªæ•°
    private static boolean bound = false;
    DatagramChannel channel = null;  
    DatagramSocket socket = null;
    int iHostPort = 5000; //auto host port
            

    /**
     * Creates new form JDialogDemo
     */
    public JDialogDemo(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        buttonGroup7 = new javax.swing.ButtonGroup();
        jTabbedPane = new javax.swing.JTabbedPane();
        jPanel_connect = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jComboBox_ports = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jButton_connect = new javax.swing.JButton();
        jButton_disconnect = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jPanel_ISO18000_6C = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jRadioButton3 = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jToggleButton1 = new javax.swing.JToggleButton();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jComboBox3 = new javax.swing.JComboBox();
        jPanel13 = new javax.swing.JPanel();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jRadioButton7 = new javax.swing.JRadioButton();
        jLabel10 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton4 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jTextField10 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jTextField12 = new javax.swing.JTextField();
        jToggleButton2 = new javax.swing.JToggleButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jPanel14 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jRadioButton10 = new javax.swing.JRadioButton();
        jRadioButton11 = new javax.swing.JRadioButton();
        jRadioButton12 = new javax.swing.JRadioButton();
        jRadioButton13 = new javax.swing.JRadioButton();
        jPanel19 = new javax.swing.JPanel();
        jComboBox6 = new javax.swing.JComboBox();
        jPanel20 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jRadioButton14 = new javax.swing.JRadioButton();
        jRadioButton15 = new javax.swing.JRadioButton();
        jRadioButton16 = new javax.swing.JRadioButton();
        jRadioButton17 = new javax.swing.JRadioButton();
        jRadioButton18 = new javax.swing.JRadioButton();
        jRadioButton19 = new javax.swing.JRadioButton();
        jPanel22 = new javax.swing.JPanel();
        jRadioButton20 = new javax.swing.JRadioButton();
        jRadioButton21 = new javax.swing.JRadioButton();
        jRadioButton22 = new javax.swing.JRadioButton();
        jRadioButton23 = new javax.swing.JRadioButton();
        jLabel17 = new javax.swing.JLabel();
        jTextField16 = new javax.swing.JTextField();
        jButton8 = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        jComboBox4 = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        jTextField13 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jTextField14 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jPanel16 = new javax.swing.JPanel();
        jComboBox5 = new javax.swing.JComboBox();
        jPanel17 = new javax.swing.JPanel();
        jRadioButton8 = new javax.swing.JRadioButton();
        jRadioButton9 = new javax.swing.JRadioButton();
        jLabel16 = new javax.swing.JLabel();
        jTextField15 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jToggleButton3 = new javax.swing.JToggleButton();
        jLabel19 = new javax.swing.JLabel();
        jPanel23 = new javax.swing.JPanel();
        jPanel24 = new javax.swing.JPanel();
        jComboBox7 = new javax.swing.JComboBox();
        jLabel18 = new javax.swing.JLabel();
        jTextField17 = new javax.swing.JTextField();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jPanel_AutoTest = new javax.swing.JPanel();
        jToggleButtonAutoTest = new javax.swing.JToggleButton();
        jLabelAutoTestTagNum = new javax.swing.JLabel();
        jLabelAutoTestTagNumValue = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextAreaAuto = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTabbedPane.setBackground(new java.awt.Color(255, 204, 255));
        jTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPaneStateChanged(evt);
            }
        });

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("RS232"));

        jComboBox_ports.setEditable(true);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("ui/Bundle"); // NOI18N
        jLabel1.setText(bundle.getString("IDWQE_B0007")); // NOI18N

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(jComboBox_ports, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox_ports, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jButton_connect.setText(bundle.getString("IDWQE_B0002")); // NOI18N
        jButton_connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_connectActionPerformed(evt);
            }
        });

        jButton_disconnect.setText(bundle.getString("IDWQE_B0005")); // NOI18N
        jButton_disconnect.setEnabled(false);
        jButton_disconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_disconnectActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Connect Mode"));

        jRadioButton1.setText("TCP/IP");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jRadioButton2.setText("RS232");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(jRadioButton2)
                .addGap(39, 39, 39))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("TCP/IP"));

        jLabel2.setText("Reader IP Address:");

        jTextField1.setText("192.168.0.103");

        jLabel3.setText("Reader Port:");

        jLabel4.setText("Host IP Address:");

        jTextField3.setText("127.0.0.1");

        jTextField4.setText("5555");

        jLabel5.setText("Host Port:");

        jTextField2.setText("1969");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField3)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel_connectLayout = new javax.swing.GroupLayout(jPanel_connect);
        jPanel_connect.setLayout(jPanel_connectLayout);
        jPanel_connectLayout.setHorizontalGroup(
            jPanel_connectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_connectLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_connectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_connectLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 361, Short.MAX_VALUE)
                        .addComponent(jButton_connect, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton_disconnect, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel_connectLayout.createSequentialGroup()
                        .addGroup(jPanel_connectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel_connectLayout.setVerticalGroup(
            jPanel_connectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_connectLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_connectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel_connectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jButton_connect, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton_disconnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel_connectLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(434, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Connect Reader", jPanel_connect);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Antenna for Test"));

        jCheckBox1.setText("ANT1");

        jCheckBox2.setText("ANT2");

        jCheckBox3.setText("ANT3");

        jCheckBox4.setText("ANT4");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox4))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jCheckBox1)
                .addComponent(jCheckBox2)
                .addComponent(jCheckBox3)
                .addComponent(jCheckBox4))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Read Interval"));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(124, 124, 124))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("List EPC of Tags"));

        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NO.", "ID", "Success", "Times", "Length"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("List Selected Tag"));

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Memory Bank"));

        jRadioButton3.setText("EPC");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRadioButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jRadioButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel6.setText("Address of Tag Data(bit):");

        jTextField5.setText("0");

        jLabel7.setText("Length of Tag Data(bit):");

        jTextField6.setText("0");

        jLabel8.setText("Tag Data(HEX):");

        jToggleButton1.setText("List EPC of Tag");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField6)
                            .addComponent(jTextField5)))
                    .addComponent(jTextField7)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(jToggleButton1)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton1)
                .addGap(108, 108, 108))
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Kill Tag"));

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Select a Tag"));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jLabel9.setText("Kill Password (8HEX):");

        jButton2.setText("Kill  Tag");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)))
        );

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Read and Write Data Block"));

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Select a Tag"));

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Memory Bank"));

        jRadioButton4.setText("Password");

        jRadioButton5.setText("EPC");

        jRadioButton6.setText("TID");

        jRadioButton7.setText("User");

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addComponent(jRadioButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jRadioButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton4)
                    .addComponent(jRadioButton5)
                    .addComponent(jRadioButton6)
                    .addComponent(jRadioButton7))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel10.setText("Address of Tag Data(WORD):");

        jTextField9.setText("0");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jButton4.setText("Write");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel11.setText("Length of Tag Data(WORD):");

        jTextField10.setText("1");

        jLabel12.setText("Access Password(8HEX):");

        jTextField11.setText("00000000");

        jLabel13.setText("Written Data(HEX):");

        jToggleButton2.setText("Read");
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(jList1);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField9))
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField10))
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel11Layout.createSequentialGroup()
                                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel12)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane3)))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel13)
                        .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton4)
                        .addComponent(jToggleButton2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder("Set protect for reading or writing"));

        jPanel18.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Memory Bank"));

        jRadioButton10.setText("Password");

        jRadioButton11.setText("EPC");

        jRadioButton12.setText("TID");

        jRadioButton13.setText("User");

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addComponent(jRadioButton10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton11)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton12)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton10)
                    .addComponent(jRadioButton11)
                    .addComponent(jRadioButton12)
                    .addComponent(jRadioButton13))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder("Select a Tag"));

        jComboBox6.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel20.setBorder(javax.swing.BorderFactory.createTitledBorder("Lock of Password"));

        jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder("Password"));

        jRadioButton14.setText("Kill Password");

        jRadioButton15.setText("Access Password");

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addComponent(jRadioButton14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(jRadioButton15)
                .addGap(18, 18, 18))
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel21Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton14)
                    .addComponent(jRadioButton15)))
        );

        jRadioButton16.setText("Writeable and readable from any state");

        jRadioButton17.setText("Permanently readable and writeable");

        jRadioButton18.setText("Readable and writeable from the secured state");

        jRadioButton19.setText("Never readable and writeable");

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jRadioButton18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButton16)
                    .addComponent(jRadioButton17)
                    .addComponent(jRadioButton19))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton19)
                .addGap(34, 34, 34))
        );

        jPanel22.setBorder(javax.swing.BorderFactory.createTitledBorder("Lock of EPC TID and User Bank"));

        jRadioButton20.setText("Lock of EPC TID and User Bank");

        jRadioButton21.setText("Permanently writeable");

        jRadioButton22.setText("Writeable from the secured state");

        jRadioButton23.setText("Never writeable");

        javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton20)
                    .addComponent(jRadioButton21)
                    .addComponent(jRadioButton22)
                    .addComponent(jRadioButton23))
                .addGap(0, 5, Short.MAX_VALUE))
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addComponent(jRadioButton20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton23))
        );

        jLabel17.setText("Access Password(8HEX):");

        jButton8.setText("Set Protect");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField16))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE))
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jPanel22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jButton8)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder("Lock Block for User"));

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel14.setText("Address of Tag Data(WORD):");

        jLabel15.setText("Access Password (8HEX):");

        jButton5.setText("Set Protect");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox4, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton5)
                            .addComponent(jLabel15))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField13)
                            .addComponent(jTextField14))))
                .addContainerGap())
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton5))
        );

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder("Alarm"));

        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder("Eas State"));

        jRadioButton8.setText("No Alarm");

        jRadioButton9.setText("Alarm");

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButton9))
                .addContainerGap(7, Short.MAX_VALUE))
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addComponent(jRadioButton8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton9))
        );

        jLabel16.setText("Access Password(8HEX):");

        jButton6.setText("Set Alarm");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jToggleButton3.setText("EasAlarm");
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox5, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel16Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel16))
                            .addGroup(jPanel16Layout.createSequentialGroup()
                                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jToggleButton3)
                                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addGap(2, 2, 2)
                        .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jToggleButton3)))
        );

        jPanel23.setBorder(javax.swing.BorderFactory.createTitledBorder("Read Protect"));

        jPanel24.setBorder(javax.swing.BorderFactory.createTitledBorder("Select a Tag"));

        jComboBox7.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel24Layout = new javax.swing.GroupLayout(jPanel24);
        jPanel24.setLayout(jPanel24Layout);
        jPanel24Layout.setHorizontalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addComponent(jComboBox7, 0, 281, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel24Layout.setVerticalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jLabel18.setText("Access Password(8HEX):");

        jButton9.setText("Lock Read");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Unlock Read");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addComponent(jPanel24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel18)
                .addGap(18, 18, 18)
                .addComponent(jTextField17, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButton10)
                .addGap(35, 35, 35))
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jTextField17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9)
                    .addComponent(jButton10))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel_ISO18000_6CLayout = new javax.swing.GroupLayout(jPanel_ISO18000_6C);
        jPanel_ISO18000_6C.setLayout(jPanel_ISO18000_6CLayout);
        jPanel_ISO18000_6CLayout.setHorizontalGroup(
            jPanel_ISO18000_6CLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_ISO18000_6CLayout.createSequentialGroup()
                .addGroup(jPanel_ISO18000_6CLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel_ISO18000_6CLayout.createSequentialGroup()
                        .addGroup(jPanel_ISO18000_6CLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel_ISO18000_6CLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel_ISO18000_6CLayout.createSequentialGroup()
                        .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel_ISO18000_6CLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jPanel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        jPanel_ISO18000_6CLayout.setVerticalGroup(
            jPanel_ISO18000_6CLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_ISO18000_6CLayout.createSequentialGroup()
                .addGroup(jPanel_ISO18000_6CLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel_ISO18000_6CLayout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel_ISO18000_6CLayout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)))
                .addGroup(jPanel_ISO18000_6CLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel_ISO18000_6CLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel_ISO18000_6CLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("ISO18000-6C Test", jPanel_ISO18000_6C);

        jToggleButtonAutoTest.setText("Start");
        jToggleButtonAutoTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonAutoTestActionPerformed(evt);
            }
        });

        jLabelAutoTestTagNum.setText("Total tags:");

        jLabelAutoTestTagNumValue.setFont(new java.awt.Font("å®‹ä½“", 3, 36)); // NOI18N
        jLabelAutoTestTagNumValue.setForeground(java.awt.Color.red);
        jLabelAutoTestTagNumValue.setText("0000");

        jTextAreaAuto.setColumns(20);
        jTextAreaAuto.setRows(5);
        jScrollPane5.setViewportView(jTextAreaAuto);

        javax.swing.GroupLayout jPanel_AutoTestLayout = new javax.swing.GroupLayout(jPanel_AutoTest);
        jPanel_AutoTest.setLayout(jPanel_AutoTestLayout);
        jPanel_AutoTestLayout.setHorizontalGroup(
            jPanel_AutoTestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_AutoTestLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_AutoTestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 731, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButtonAutoTest, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel_AutoTestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_AutoTestLayout.createSequentialGroup()
                        .addComponent(jLabelAutoTestTagNum, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(3, 3, 3))
                    .addGroup(jPanel_AutoTestLayout.createSequentialGroup()
                        .addComponent(jLabelAutoTestTagNumValue, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(21, Short.MAX_VALUE))))
        );
        jPanel_AutoTestLayout.setVerticalGroup(
            jPanel_AutoTestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_AutoTestLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_AutoTestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_AutoTestLayout.createSequentialGroup()
                        .addComponent(jLabelAutoTestTagNum, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addComponent(jLabelAutoTestTagNumValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(715, 715, 715))
                    .addGroup(jPanel_AutoTestLayout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 730, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jToggleButtonAutoTest, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(76, Short.MAX_VALUE))))
        );

        jTabbedPane.addTab("Auto Test", jPanel_AutoTest);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 8, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 899, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPaneStateChanged

        //if (jTabbedPane.getSelectedComponent() == jPanel_download) {
        //}
    }//GEN-LAST:event_jTabbedPaneStateChanged

    private void jButton_disconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_disconnectActionPerformed
//æ–­å¼€æŒ‰é’®
        switch(ConnectMode)
	{
	case 0:
		ReaderAPI.Net_DisconnectScanner();
		break;
	case 1:
                ReaderAPI.DisconnectScanner(hScanner[0]);
		break;

	}
	ifConnectReader=0;
	NewConnect=0;

	hScanner[0]	=	0;

        // è¿žæŽ¥æŒ‰é’®å’Œæ–­å¼€æŒ‰é’®
	jButton_connect.setEnabled(true);
        jButton_disconnect.setEnabled(false);


   }//GEN-LAST:event_jButton_disconnectActionPerformed

    private void jButton_connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_connectActionPerformed
		// è¿žæŽ¥æŒ‰é’®ç‚¹å‡»äº‹ä»¶
        connectButtonFunc();
   }//GEN-LAST:event_jButton_connectActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        //Comboxä¸²å�£å�·
        try{
                jComboBox_ports.removeAllItems();
                int k = 0;
                int i = 0;
                for (i = 0; i < 22; i++){
                    k = i+1;
                    jComboBox_ports.addItem("COM" + k);
                }
                jComboBox_ports.setSelectedIndex(0);
                jComboBox_ports.setEditable(false);


                InetAddress iInet = InetAddress.getLocalHost();
                jTextField3.setText(iInet.getHostAddress().toString());//ä¸»æœºIP

                Random random = new Random();
                m_HostPort  =   1024+Math.abs(random.nextInt())%60000;
                jTextField4.setText(String.valueOf(m_HostPort));//ä¸»æœºç«¯å�£
                jRadioButton1ActionPerformed(null);




                //=====================ISO18000-6Cç•Œé�¢====================================
                //Read Interval,10ms 20ms 30ms 50ms 100ms 200ms 500ms
                int [] interval = new int[]{10,20,30,50,100,200,500};
                jComboBox1.removeAllItems();
                for (i = 0; i < interval.length; i++){

                    jComboBox1.addItem(interval[i]+"ms");
                }
                jComboBox1.setSelectedIndex(interval.length-2);
                jComboBox1.setEditable(false);


                //ANT
                jCheckBox1.setSelected(true);//é€‰ä¸­

                //åˆ—æ ‡ç­¾çš„EPCè¦�é€‰ä¸­
                jRadioButton3.setSelected(true);//é€‰ä¸­

                //è®¾ç½®åˆ—è¡¨åˆ—å®½
                TableColumn firsetColumn = jTable1.getColumnModel().getColumn(0);
                firsetColumn.setPreferredWidth(30);
                firsetColumn.setMaxWidth(30);
                firsetColumn.setMinWidth(30);

                TableColumn fimsetColumn = jTable1.getColumnModel().getColumn(1);
                fimsetColumn.setPreferredWidth(300);
                fimsetColumn.setMaxWidth(300);
                fimsetColumn.setMinWidth(300);


                //Read and Write Data Block, å�—çš„è¯»å†™ï¼Œå››ä¸ªåŒºé€‰æ‹©
                buttonGroup2.add (jRadioButton4);
                buttonGroup2.add (jRadioButton5);
                buttonGroup2.add (jRadioButton6);
                buttonGroup2.add (jRadioButton7);
                jRadioButton5.setSelected(true);
                jTextField9.setText("0");
                jTextField10.setText("1");
                jTextField11.setText("00000000");
                jScrollPane2.setVisible(false);
                hlistModel = new DefaultListModel();


                //Set protect for reading or writing è¯»å†™ä¿�æŠ¤,å››åŒºé€‰æ‹©
                buttonGroup3.add (jRadioButton10);
                buttonGroup3.add (jRadioButton11);
                buttonGroup3.add (jRadioButton12);
                buttonGroup3.add (jRadioButton13);
                jRadioButton11.setSelected(true);

                //Kill password ,Access password
                buttonGroup4.add (jRadioButton14);
                buttonGroup4.add (jRadioButton15);
                jRadioButton15.setSelected(true);//Access password select

                //å¯†ç �é”�ä½�å‡ ä¸ªç±»åž‹
                buttonGroup5.add (jRadioButton16);
                buttonGroup5.add (jRadioButton17);
                buttonGroup5.add (jRadioButton18);
                buttonGroup5.add (jRadioButton19);
                jRadioButton16.setSelected(true);//

                //Lock of EPC TID and User Bank, é”�EPCå’Œå…¶å®ƒåŒº
                buttonGroup6.add (jRadioButton20);
                buttonGroup6.add (jRadioButton21);
                buttonGroup6.add (jRadioButton22);
                buttonGroup6.add (jRadioButton23);
                jRadioButton20.setSelected(true);//

                //EAS
                buttonGroup7.add (jRadioButton8);
                buttonGroup7.add (jRadioButton9);
                jRadioButton8.setSelected(true);//


                //kill tag
                jComboBox2.removeAllItems();
                jComboBox2.setEditable(false);


                //å�—çš„è¯»å†™
                jComboBox3.removeAllItems();
                jComboBox3.setEditable(false);


                //Set protect for reading or writing
                jComboBox6.removeAllItems();
                jComboBox6.setEditable(false);

                //Lock Block for User
                jComboBox4.removeAllItems();
                jComboBox4.setEditable(false);

                //Alarm
                jComboBox5.removeAllItems();
                jComboBox5.setEditable(false);

                //Read Protect
                jComboBox7.removeAllItems();
                jComboBox7.setEditable(false);

                
                //æœ€å�Žä¸€é¡µè‡ªåŠ¨è¾“å‡º
                //jPanel_AutoTest.setVisible(false);
                //jTableAuto.setVisible(false);
                
                //æ›´æ–°å¤–è´­çŠ¶æ€�
                UpdateStatus();
                //========================================================================


                running = false;
                //startRun();




                System.out.println("formWindowOpened!\n");
        } catch (Exception e) {
                    e.printStackTrace();
                    System.out.println("Exception of formWindowOpened:\n");

        }

    }//GEN-LAST:event_formWindowOpened

    private void UpdateStatus(){
        if ( ifConnectReader ==	0) { //è¯»å†™å™¨æ˜¯å�¦è¿žæŽ¥ï¼Œ1---è¿žæŽ¥,0---æ²¡æœ‰è¿žæŽ¥
            jCheckBox1.setEnabled(false);
            jCheckBox2.setEnabled(false);
            jCheckBox3.setEnabled(false);
            jCheckBox4.setEnabled(false);

            jComboBox1.setEnabled(false);

            jRadioButton3.setEnabled(false);

            jTextField5.setEnabled(false);
            jTextField6.setEnabled(false);
            jTextField7.setEnabled(false);
            //jButton1.setEnabled(false);//list tag
            jToggleButton1.setEnabled(false);


            jComboBox2.setEnabled(false);
            jTextField8.setEnabled(false);
            jButton2.setEnabled(false);//kill tag


            //block read and write
            jComboBox3.setEnabled(false);
            jRadioButton4.setEnabled(false);
            jRadioButton5.setEnabled(false);
            jRadioButton6.setEnabled(false);
            jRadioButton7.setEnabled(false);
            jTextField9.setEnabled(false);
            jTextField10.setEnabled(false);
            jTextField11.setEnabled(false);
            jTextField12.setEnabled(false);
            //jButton3.setEnabled(false);//Read
            jToggleButton2.setEnabled(false);
            jButton4.setEnabled(false);//Write




            //Set protect for reading or writing
            jRadioButton10.setEnabled(false);
            jRadioButton11.setEnabled(false);
            jRadioButton12.setEnabled(false);
            jRadioButton13.setEnabled(false);

            jRadioButton14.setEnabled(false);
            jRadioButton15.setEnabled(false);

            jRadioButton16.setEnabled(false);
            jRadioButton17.setEnabled(false);
            jRadioButton18.setEnabled(false);
            jRadioButton19.setEnabled(false);

            jComboBox6.setEnabled(false);
            jRadioButton20.setEnabled(false);
            jRadioButton21.setEnabled(false);
            jRadioButton22.setEnabled(false);
            jRadioButton23.setEnabled(false);

            //jTextField16.setEnabled(false);
            jButton8.setEnabled(false);//set Protect



            //Lock Block for User
            jComboBox4.setEnabled(false);
            jTextField13.setEnabled(false);
            jTextField14.setEnabled(false);
            jButton5.setEnabled(false);//set Protect



            //Alarm
            jComboBox5.setEnabled(false);
            jRadioButton8.setEnabled(false);
            jRadioButton9.setEnabled(false);
            jTextField15.setEnabled(false);
            jButton6.setEnabled(false);//set Alarm
            //jButton7.setEnabled(false);//EasAlarm
            jToggleButton3.setEnabled(false);



            //Read Protect
            jComboBox7.setEnabled(false);
            jTextField17.setEnabled(false);
            jButton9.setEnabled(false);//Lock Read
            jButton10.setEnabled(false);//Unlock Read


        }else {
            //1---è¿žæŽ¥
            jCheckBox1.setEnabled(true);
            jCheckBox2.setEnabled(true);
            jCheckBox3.setEnabled(true);
            jCheckBox4.setEnabled(true);

            jComboBox1.setEnabled(true);

            jRadioButton3.setEnabled(true);

            jTextField5.setEnabled(true);
            jTextField6.setEnabled(true);
            jTextField7.setEnabled(true);
            //jButton1.setEnabled(true);//list tag
            jToggleButton1.setEnabled(true);


            jComboBox2.setEnabled(true);
            jTextField8.setEnabled(true);
            jButton2.setEnabled(true);//kill tag



            //block read and write
            jComboBox3.setEnabled(true);
            jRadioButton4.setEnabled(true);
            jRadioButton5.setEnabled(true);
            jRadioButton6.setEnabled(true);
            jRadioButton7.setEnabled(true);
            jTextField9.setEnabled(true);
            jTextField10.setEnabled(true);
            jTextField11.setEnabled(true);
            jTextField12.setEnabled(true);
            //jButton3.setEnabled(true);//Read
            jToggleButton2.setEnabled(true);
            jButton4.setEnabled(true);//Write




            //Set protect for reading or writing
            jRadioButton10.setEnabled(true);
            jRadioButton11.setEnabled(true);
            jRadioButton12.setEnabled(true);
            jRadioButton13.setEnabled(true);

            jRadioButton14.setEnabled(true);
            jRadioButton15.setEnabled(true);

            jRadioButton16.setEnabled(true);
            jRadioButton17.setEnabled(true);
            jRadioButton18.setEnabled(true);
            jRadioButton19.setEnabled(true);

            jComboBox6.setEnabled(true);
            jRadioButton20.setEnabled(true);
            jRadioButton21.setEnabled(true);
            jRadioButton22.setEnabled(true);
            jRadioButton23.setEnabled(true);

            jTextField16.setEditable(true);
            jButton8.setEnabled(true);//set Protect



            //Lock Block for User
            jComboBox4.setEnabled(true);
            jTextField13.setEnabled(true);
            jTextField14.setEnabled(true);
            jButton5.setEnabled(true);//set Protect



            //Alarm
            jComboBox5.setEnabled(true);
            jRadioButton8.setEnabled(true);
            jRadioButton9.setEnabled(true);
            jTextField15.setEnabled(true);
            jButton6.setEnabled(true);//set Alarm
            //jButton7.setEnabled(true);//EasAlarm
            jToggleButton3.setEnabled(true);



            //Read Protect
            jComboBox7.setEnabled(true);
            jTextField17.setEnabled(true);
            jButton9.setEnabled(true);//Lock Read
            jButton10.setEnabled(true);//Unlock Read




        }
    }

    protected  static void startRun(){
        Timer timer = new Timer();
        TimerTask task =new TimerTask(){
            @Override
             public void run(){
                if (running){
                 System.out.println("å¼€å§‹è¿�è¡Œ"); //åœ¨è¿™å†™ä½ è¦�è°ƒç”¨çš„æ–¹æ³•

                }
                else{
                    //this.cancel();
                    //System.exit(0);
                }

             }
         };
        timer.scheduleAtFixedRate(task, new Date(),timer_interval);//å½“å‰�æ—¶é—´å¼€å§‹èµ·åŠ¨ æ¯�æ¬¡é—´éš”2ç§’å†�å�¯åŠ¨
        // timer.scheduleAtFixedRate(task, 1000,2000); // 1ç§’å�Žå�¯åŠ¨  æ¯�æ¬¡é—´éš”2ç§’å†�å�¯åŠ¨
     }

    // Mytimer class
class MyTimer extends Thread
{
    private boolean endtime=false;
    private boolean run=false;
    private int iInterval   =   1000;

    private byte[] ReaderID = new byte[10];
    @Override
    public void run()
    {
        DefaultListModel listModel=null;
        listModel = new DefaultListModel();
        for(;;)
        {

            //System.out.println("ThreadRun!"); //åœ¨è¿™å†™ä½ è¦�è°ƒç”¨çš„æ–¹æ³•

            try{
            int res = -1;
            int be_antenna	=	0;
            int i,j,k,ID_len=0,ID_len_temp=0;
            String str = "",str_temp;
            String strTemp;
            byte[] temp = new byte[64*2];
            byte[] DB = new byte[128];
            byte[] IDBuffer = new byte[30*256];
            int[] nCounter = new int[2];

            boolean bFlag = false;
            //////////////////////////////////////////////////////////////////////////
            //add by mqs 20130710 æ–°æ–¹æ³•
            int itmpAnt	=	0;

            itmpAnt	=	Read_times % iModAnt;

            itmpAnt = gAntenna[itmpAnt];

            Read_times++;

            if ( 1 == iPlatform )//0---626, 1---218
            {
                    //218ä¸ºäº†æ��é«˜è¯»æ ‡ç­¾é€Ÿåº¦ï¼Œä¸�ç”¨åˆ‡æ�¢å¤©çº¿ï¼ŒåŠ ä¸€ä¸ªå‘½ä»¤ï¼Œä¸‹é�¢è‡ªåŠ¨åˆ‡æ�¢å¤©çº¿ï¼Œç¼–è¯‘   å�¦åˆ™æ— ï¼Œç”¨å®�æŽ§åˆ¶,add by mqs 20130910

            }
            else
            {
                    bFlag = true;
            }
            if ( bFlag )
            {
                    switch(ConnectMode)
                    {
                    case 0://ç½‘å�£
                        res=ReaderAPI.Net_SetAntenna(hScanner[0], itmpAnt);
                            break;
                    case 1://RS232
                        res=ReaderAPI.SetAntenna(hScanner[0], itmpAnt, Address);
                            break;

                    }
                    //æœ¬æ�¥å¼€å§‹çš„æ—¶å€™ï¼Œå�ªRS485 sleep ä¸€ä¸‹ã€‚å�¯ç›¸åˆ°218æ“�ä½œR2000æ¨¡å�—ï¼Œæ‰€ä»¥æ”¹æˆ�å¦‚ä¸‹
                    //if ( 2 == ConnectMode )
                    if ( 1 == iPlatform )//0---626, 1---218
                    {
                            //Sleep(ReadRS485SleepTime);
                    }
                    else if ( 2 == ConnectMode )
                    {
                            //Sleep(ReadRS485SleepTime);
                    }
                    if ( ReaderAPI._OK != res )
                    {
                            return;//ç»§ç»­ä¸‹ä¸€è½®å¤©çº¿
                    }
            }
            //////////////////////////////////////////////////////////////////////////
            switch(nIDEvent){
                case 1://list to tag
                    switch(ConnectMode)
                    {
                    case 0://ç½‘å�£
                        res=ReaderAPI.Net_EPC1G2_ReadLabelID(hScanner[0],mem,ptr,len,mask,IDBuffer,nCounter);
                            break;
                    case 1://RS232
                        res=ReaderAPI.EPC1G2_ReadLabelID(hScanner[0],mem,ptr,len,mask,IDBuffer,nCounter, Address);
                            break;

                    }
                    k=jTable1.getRowCount();
                    if (res==ReaderAPI._OK)
                    {
                        //è¿™å�¥æ˜¯ä¸ºäº†æµ‹è¯•ç”¨
                        if ( nCounter[0] > 8 ){
                            i = nCounter[0];
                        }

                        for(i=0;i<nCounter[0];i++){
                            if (IDBuffer[ID_len]>32)
                            {
                                    nCounter[0]=0;
                                    break;
                            }
                            ID_len_temp=IDBuffer[ID_len]*2+1;//1word=16bit
                            //memcpy(EPCC1G2_IDBuffer[i], &IDBuffer[ID_len], ID_len_temp);
                            System.arraycopy(IDBuffer, ID_len, EPCC1G2_IDBuffer[i], 0, ID_len_temp);
                            ID_len+=ID_len_temp;
                        }

                        //é”‹é¸£å™¨å“�ä¸€ä¸‹ï¼Œçœ‹javaå¦‚ä½•å®žçŽ°ï¼ŒçŽ°åœ¨æ²¡æ—¶é—´æŸ¥
                        if (nCounter[0]>0){
                            //MessageBeep(-1);
                        }


                        for(i=0;i<nCounter[0];i++){

                            str="";
                            ID_len=EPCC1G2_IDBuffer[i][0]*2;
                            System.arraycopy(EPCC1G2_IDBuffer[i], 1, temp, 0, ID_len);

                            //å°†å­—èŠ‚è½¬16è¿›åˆ¶å­—ç¬¦ä¸² 0x31 0x32 ===> "3132"
                            str = Utility.bytes2HexString(temp, ID_len);




                            //æŸ¥æœ‰æ²¡æœ‰ç›¸å�Œçš„EPC
                            for(j=0;j<k;j++)
                            {
                                //å�–ç¬¬iè¡Œç¬¬4åˆ—
                                strTemp = (String) jTable1.getValueAt(j, 4);
                                ID_len_temp = (int)Integer.parseInt(strTemp, 16);
                                ID_len_temp *= 2;

                                if (ID_len == ID_len_temp){

                                    //å�–ç¬¬iè¡Œç¬¬iåˆ—
                                    strTemp = (String) jTable1.getValueAt(j, 1);
                                    str_temp=strTemp;
                                    if(str.equals(str_temp))
                                    {
                                            //i = 0;
                                            break;
                                    }
                                }
                            }


                            //LinkedList<String> result = new LinkedList<String>();
                            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                            //æ–°åŠ ä¸€è¡Œæ•°æ�®åˆ°è¡¨æ ¼ä¸­
                            if(j == k){
                                //åº�å�·
                                String strID = String.format("%d", k+1);//0
                                String strEPC = str;                    //1
                                String strSuccess = "1";                //2
                                String strTimes = "1";                  //3
                                String strLLen = String.format("%02X", EPCC1G2_IDBuffer[i][0]);//4


                                model.addRow(new Object[]{
                                strID,          //0
                                strEPC,         //1
                                strSuccess,     //2
                                strTimes,       //3
                                strLLen         //4
                                });
                                k++;


                            }
                            else
                            {
                                //å…ˆå�–å‡ºå½“å‰�è¡Œ
                                strTemp = (String) jTable1.getValueAt(j, 2);
                                i = Integer.parseInt(strTemp);
                                strTemp = String.valueOf(i+1);

                                //å†�æ›´æ–°
                                jTable1.setValueAt(strTemp, j, 2);

                            }

                        }

                    }
                    for(i=0;i<k;i++){
                            //m_ListID.SetItemText(i,3,itoa(Read_times,temp,10));
                        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                        strTemp = String.valueOf(Read_times);
                        jTable1.setValueAt(strTemp, i, 3);
                    }

                    break;

                case 2://å�—è¯»
                    switch(ConnectMode)
                    {
                        case 0://ç½‘å�£
                            res=ReaderAPI.Net_EPC1G2_ReadWordBlock(hScanner[0],EPC_Word,IDTemp,mem,ptr,len,DB,AccessPassword);
                            break;
                        case 1://RS232
                            res=ReaderAPI.EPC1G2_ReadWordBlock(hScanner[0],EPC_Word,IDTemp,mem,ptr,len,DB,AccessPassword, Address);
                            break;
                    }
                    if (res==ReaderAPI._OK)
                    {
			str="";
			for(i=0;i<len*2;i++)
			{
				strTemp = String.format("%02X",DB[i]);
				str    += strTemp;
			}



			//m_ListData.AddString(str);
			//m_ListData.SetCurSel(m_ListData.GetCount()-1);
                    }
                    else
                    {
                        str="Read Fail!";
                        //m_ListData.AddString(str);
                    }
                    //å½“JListçš„é¡¹é›†å�ˆä¸ºç©ºæ—¶
                    //if(0 == jList1.getModel().getSize())
                    {
                        //æ–°å»ºä¸€ä¸ªé»˜è®¤é¡¹é›†å�ˆ

                        //æ“�ä½œè¿™ä¸ªé›†å�ˆ
                        listModel.add(listModel.getSize(), str);
                        //å°†è¿™ä¸ªé›†å�ˆæ·»åŠ åˆ°JListä¸­
                        jList1.setModel(listModel);
                        //jList1.setSelectedValue(nIDEvent, bFlag);

                        jList1.setSelectedIndex(listModel.getSize()-1);
                        //int iListS=jList1.getSelectedIndex();
                        //Rectangle rect=jList1.getCellBounds(iListS, iListS);
                        //jList1.scrollRectToVisible(rect);
                    }
                    //JListçš„é¡¹ä¸�ä¸ºç©ºæ—¶
                    //else
                    //{
                        //ä»ŽJListä¸­èŽ·å¾—è¿™ä¸ªé›†å�ˆ,è½¬æ�¢ä¸ºé»˜è®¤é¡¹é›†å�ˆç±»åž‹
                    //    DefaultListModel listModel= (DefaultListModel) jList1.getModel();
                        //è¿½åŠ å…ƒç´ 
                    //    listModel.add(listModel.getSize(), str);
                        //å°†è¿™ä¸ªé›†å�ˆæ·»åŠ åˆ°JListä¸­
                    //    jList1.setModel(listModel);
                    //}




                    break;

                case 3:
                    switch(ConnectMode)
                    {
                    case 0://ç½‘å�£
                        res=ReaderAPI.Net_EPC1G2_EasAlarm(hScanner[0]);
                            break;
                    case 1://RS232
                        res=ReaderAPI.EPC1G2_EasAlarm(hScanner[0], Address);
                            break;


                    }
                    
                    String name="icon1.JPG";
                    ImageIcon icon=new ImageIcon(name);  
                        
                    if(res==ReaderAPI._OK)
                    {
                            //MessageBeep(-1);
                            //new ShowImage("").setVisible(true);
                        
                        //è¿™ä¸ªæ˜¯å¼ºåˆ¶ç¼©æ”¾åˆ°ä¸Žç»„ä»¶(Label)å¤§å°�ç›¸å�Œ   
                        //icon=new ImageIcon(icon.getImage().getScaledInstance(getWidth(), getHeight()-25, Image.SCALE_DEFAULT));  
                        //è¿™ä¸ªæ˜¯æŒ‰ç­‰æ¯”ç¼©æ”¾   
                        //              icon=new ImageIcon(icon.getImage().getScaledInstance(reImgWidth, reImgHeight, Image.SCALE_DEFAULT));   
                        jLabel19.setIcon(icon);  
                        jLabel19.setHorizontalAlignment(SwingConstants.CENTER);  

                        
                    }

                    Thread.sleep(500);
                    
                    name="icon2.JPG";
                    icon=new ImageIcon(name);  
                    //è¿™ä¸ªæ˜¯å¼ºåˆ¶ç¼©æ”¾åˆ°ä¸Žç»„ä»¶(Label)å¤§å°�ç›¸å�Œ   
                    //icon=new ImageIcon(icon.getImage().getScaledInstance(getWidth(), getHeight()-25, Image.SCALE_DEFAULT));  
                    //è¿™ä¸ªæ˜¯æŒ‰ç­‰æ¯”ç¼©æ”¾   
                    //              icon=new ImageIcon(icon.getImage().getScaledInstance(reImgWidth, reImgHeight, Image.SCALE_DEFAULT));   
                    jLabel19.setIcon(icon);  
                    jLabel19.setHorizontalAlignment(SwingConstants.CENTER);


                    break;

                case 4:
                    break;
            }



            ///

            if (endtime){
                run = false;
                break;
            }



            //only sleep 1s per.

                Thread.sleep(iInterval);
            }
            catch (InterruptedException ex)
            {
                System.out.println(ex);
            }

            run = true;

        }
    }
    public void setEnd(boolean t)
    {
        endtime=t;
    }
    public void setInterval(int time)
    {
        iInterval=time;
    }
    public boolean getRun()
    {
        return run;
    }

    private void ShowImage(String ImgFile){
        //super("ShowImage");
        Image image =null;
        try{
            image=ImageIO.read(new File(ImgFile));
        }catch(IOException ex){
        }
        JLabel label =new JLabel(new ImageIcon(image));
        add(label);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        pack();
    }
}



class MyTimerAuto extends Thread
{
    private boolean endtime=false;

    
    @Override
    public void run()
    {
        Selector selector = null;  
        try {  
             
            
            if ( !socket.isBound() && !bound ){
                            socket.bind(new InetSocketAddress(iHostPort));//test:7777 
                            bound = true;
                        }

            selector = Selector.open();  
            channel.register(selector, SelectionKey.OP_READ);  
        } catch (Exception e) {  
            e.printStackTrace();  
        }  

        ByteBuffer byteBuffer = ByteBuffer.allocate(65536);  
        while (true) {  
            try {  
                if (endtime){
                
                break;
                }
                
                int eventsCount = selector.select(1000);  
                if (eventsCount > 0) {  
                    Set selectedKeys = selector.selectedKeys();  
                    Iterator iterator = selectedKeys.iterator();  
                    while (iterator.hasNext()) {  
                        SelectionKey sk = (SelectionKey) iterator.next();  
                        iterator.remove();  
                        if (sk.isReadable()) {  
                            DatagramChannel datagramChannel = (DatagramChannel) sk  
                                    .channel();  
                            SocketAddress sa = datagramChannel  
                                    .receive(byteBuffer);  
                            byteBuffer.flip();  

                            // æµ‹è¯•ï¼šé€šè¿‡å°†æ”¶åˆ°çš„ByteBufferé¦–å…ˆé€šè¿‡ç¼ºçœ�çš„ç¼–ç �è§£ç �æˆ�CharBuffer å†�è¾“å‡º   
                            CharBuffer charBuffer = Charset.defaultCharset()  
                                    .decode(byteBuffer);  
                            System.out.println("receive message:"  
                                    + charBuffer.toString());  
                            
                            iTagNumber += 1;//autoä¸‹çš„tagçš„ä¸ªæ•°
                            jLabelAutoTestTagNumValue.setText(""+iTagNumber);
                            jTextAreaAuto.append(charBuffer.toString());
                            
                            jTextAreaAuto.setCaretPosition(jTextAreaAuto.getText().length());
                            byteBuffer.clear();  


                        }  
                    }  
                }  
            } catch (Exception e) {  
                e.printStackTrace();  
            } 
            
            
            
            
            
            
    
    /*
        DatagramChannel channel = null;
        DatagramSocket socket = null;
                
        try{
            System.out.println("ThreadRun Start!"); //åœ¨è¿™å†™ä½ è¦�è°ƒç”¨çš„æ–¹æ³•
        
                channel = DatagramChannel.open();
		socket = channel.socket();
                // è®¾ç½®ä¸ºé�žé˜»å¡žæ¨¡å¼�
		channel.configureBlocking(false);
                        
                // è‹¥å¸Œæœ›æ˜¯å…¨å�Œå·¥æ¨¡å¼�ï¼Œåˆ™å�¯åŠ¨ä¸€ä¸ªç›‘å�¬ç«¯å�£ï¼Œæ‰¿æ‹…æœ�åŠ¡å™¨çš„è�Œè´£
			// è‹¥ä¸�èƒ½ç»‘å®šåˆ°æŒ‡å®šç«¯å�£ï¼Œåˆ™æŠ›å‡ºSocketException
			
			InetAddress InHostaddress = InetAddress.getLocalHost();
			SocketAddress saHost = new InetSocketAddress(InHostaddress,
					7777);
                    if ( !socket.isBound()  ){
                            socket.bind(saHost);
                            //bound = true;
                        }
                    
        }catch(IOException ex){
                System.out.println("Run Error!");
            }
                    
        for(;;)
        {

            if (endtime){
                
                break;
            }

            try{
            
                //System.out.println("ThreadRun!"); //åœ¨è¿™å†™ä½ è¦�è°ƒç”¨çš„æ–¹æ³•
                    
                int iRecvLen = 0;
                ByteBuffer byteBuffer = ByteBuffer.allocate(65535);
                byteBuffer.clear();
                SocketAddress sb = channel.receive(byteBuffer);
                
                byteBuffer.flip();
                iRecvLen = byteBuffer.limit();
                System.out.println("\niRecvLen="+iRecvLen);
                
                    
            }catch(IOException ex){
                
            }
         */   
        }


        //try {  
        //    channel.close();
        //    socket.close();
        //} catch (Exception e) {  
        //    e.printStackTrace();  
        //}  

    }
    
    
    public void setEnd(boolean t)
    {
        endtime=t;
    }
    
 }
    

class MyTimerSerialAuto extends Thread
{
    private boolean endtime=false;

    
    @Override
    public void run()
    {
        
        int iChar = 0;
        while (true) {  
            try {  
                if (endtime){
                
                break;
                }
                
                iChar = ReaderAPI.GetSerialData();
                if ( 0 != iChar ){
                    //jLabelAutoTestTagNumValue.setText(""+iTagNumber);
                    // æµ‹è¯•ï¼šé€šè¿‡å°†æ”¶åˆ°çš„ByteBufferé¦–å…ˆé€šè¿‡ç¼ºçœ�çš„ç¼–ç �è§£ç �æˆ�CharBuffer å†�è¾“å‡º   
                            //CharBuffer charBuffer = Charset.defaultCharset()  
                            //        .decode() 
                            //System.out.println("receive message:"  
                            //        + charBuffer.toString());  
                    
                    byte[] bytes = new byte[1];
                    bytes[0] = (byte)iChar;
                    if ( 0 == iChar ){
                        
                    }
                    else
                    {
                        if ( 0x0A == iChar ){
                            iTagNumber += 1;//autoä¸‹çš„tagçš„ä¸ªæ•°
                            jLabelAutoTestTagNumValue.setText(""+iTagNumber);
                        }
                        
                        String isoString = new String(bytes, "ISO-8859-1");

                        //String s = String.valueOf( iChar); // å…¶ä¸­ value ä¸ºä»»æ„�ä¸€ç§�æ•°å­—ç±»åž‹ã€‚
                        jTextAreaAuto.append(isoString);
                            
                        jTextAreaAuto.setCaretPosition(jTextAreaAuto.getText().length());
                        
                    }
                    
                }
                        
            } catch (Exception e) {  
                e.printStackTrace();  
            } 
            
        }
    }
    
    
    public void setEnd(boolean t)
    {
        endtime=t;
    }
    
 }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
//å�—å†™
        String strTemp;
        int m_LAddress = 0;
        int m_LLen = 0;
        int m_mem = 0;//bank

        //æ¸…ç©ºlist

        //0---å¯†ç �ï¼Œ 1---EPCï¼Œ 2---TIDï¼Œ 3---USER
        //æŸ¥é•¿åº¦
        strTemp = jTextField10.getText();
        m_LLen = Integer.parseInt(strTemp);
        if ((m_LLen<1) || (m_LLen>2048))
	{
            //MessageBox("Please input Length of Tag Data more than 1!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please input Length of Tag Data between 0 and 2048!", "Warning", JOptionPane.ERROR_MESSAGE);
            jTextField10.grabFocus();
            jToggleButton2.setSelected(false);
            return;
	}

        mem=m_mem;
        switch(mem)
	{
	case 0x00:
            if ((m_LLen<1) || (m_LLen>4)){
                JOptionPane.showMessageDialog(this, "Please input Length of Tag Data between 1 and 4 Word!", "Warning", JOptionPane.ERROR_MESSAGE);
                jTextField10.grabFocus();
                jToggleButton2.setSelected(false);
                return;
            }
            break;
        case 0x02:
            if ((m_LLen<1) || (m_LLen>64)){
                JOptionPane.showMessageDialog(this, "Please input Length of Tag Data between 1 and 8 Word!", "Warning", JOptionPane.ERROR_MESSAGE);
                jTextField10.grabFocus();
                jToggleButton2.setSelected(false);
                return;
            }
            break;
        case 0x01:
            if ((m_LLen<1) || (m_LLen>32)){
                JOptionPane.showMessageDialog(this, "Please input Length of Tag Data between 1 and 32 Word!", "Warning", JOptionPane.ERROR_MESSAGE);
                jTextField10.grabFocus();
                jToggleButton2.setSelected(false);
                return;
            }
            break;
        case 0x03:
            if ((m_LLen<1) || (m_LLen>128)){
                JOptionPane.showMessageDialog(this, "Please input Length of Tag Data between 1 and 128 Word!", "Warning", JOptionPane.ERROR_MESSAGE);
                jTextField10.grabFocus();
                jToggleButton2.setSelected(false);
                return;
            }
            break;
        }

        //0---å¯†ç �ï¼Œ 1---EPCï¼Œ 2---TIDï¼Œ 3---USER
        if ( jRadioButton4.isSelected() ){
            m_mem = 0;//bank
        }
        if ( jRadioButton5.isSelected() ){
            m_mem = 1;//bank
        }
        if ( jRadioButton6.isSelected() ){
            m_mem = 2;//bank
        }
        if ( jRadioButton7.isSelected() ){
            m_mem = 3;//bank
        }



        //è®¿é—®å¯†ç �
        //åˆ¤æ–­æ˜¯ä¸�æ˜¯16å­—ä¸²
        strTemp = jTextField11.getText();
        if ( !Utility.isHexString(strTemp) && !strTemp.isEmpty() ){
            //MessageBox("Please input HEX!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please input HEX!", "Warning", JOptionPane.ERROR_MESSAGE);
            jTextField7.grabFocus();
            jToggleButton1.setSelected(false);
            return;
        }

        if ( strTemp.length() != 8 ){
            //MessageBox("Please input enough Length of AccessPassword!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please input enough Length of AccessPassword!", "Warning", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //å°†å­—ç¬¦ä¸²å�˜ä¸ºå­—èŠ‚æ•°ç»„
        AccessPassword = Utility.convert2HexArray(strTemp);

        //è¦�å†™çš„å†…å®¹
        //åˆ¤æ–­æ˜¯ä¸�æ˜¯16å­—ä¸²
        strTemp = jTextField12.getText();
        if ( !Utility.isHexString(strTemp) && !strTemp.isEmpty() ){
            //MessageBox("Please input HEX!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please input HEX!", "Warning", JOptionPane.ERROR_MESSAGE);
            jTextField7.grabFocus();
            jToggleButton1.setSelected(false);
            return;
        }

        if ( strTemp.length() == 0 || strTemp.length()/4 < m_LLen  ){
            //MessageBox("Please input enough Length of AccessPassword!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please input enough Length of Tag Data!", "Warning", JOptionPane.ERROR_MESSAGE);
            return;
        }
        mask = Utility.convert2HexArray(strTemp);

        //m_mem æŒ‡0---å¯†ç �ï¼Œ1---EPCï¼Œ2---TID, 3---USER
	mem=m_mem;
	ptr=m_LAddress;
	len=m_LLen;


        int CurSel=jComboBox3.getSelectedIndex();
	EPC_Word=EPCC1G2_IDBuffer[CurSel][0];

	for(int i=0;i<EPC_Word*2;i++){
            IDTemp[i]=EPCC1G2_IDBuffer[CurSel][i+1];
	}


            int i = 0;
            int k = 0;
            byte[] bTmpAnt = new byte[4];
            m_antenna_sel=0;
            bTmpAnt[0] = 0;
            bTmpAnt[1] = 0;
            bTmpAnt[2] = 0;
            bTmpAnt[3] = 0;
            gAntenna[0] = 0;
            gAntenna[1] = 0;
            gAntenna[2] = 0;
            gAntenna[3] = 0;
            iModAnt	=	0;
            if(jCheckBox1.isSelected())
            {
                    bTmpAnt[0] = 1;
                    iModAnt++;
                    m_antenna_sel += 1;
            }

            if(jCheckBox2.isSelected())
            {
                    bTmpAnt[1] = 2;
                    iModAnt++;
                    m_antenna_sel += 2;
            }

            if(jCheckBox3.isSelected())
            {
                    bTmpAnt[2] = 4;
                    iModAnt++;
                    m_antenna_sel += 4;
            }

            if(jCheckBox4.isSelected())
            {
                    bTmpAnt[3] = 8;
                    iModAnt++;
                    m_antenna_sel += 8;
            }

            for (i = 0; i < 4; i++)
            {
                    if ( bTmpAnt[i] != 0 )
                    {
                            gAntenna[k]	=	bTmpAnt[i];
                            k++;
                    }
            }


		switch(m_antenna_sel)
		{
		case 0:
			//MessageBox("Please choose one antenna at least!","Warning",MB_ICONWARNING);
			JOptionPane.showMessageDialog(this, "Please choose one antenna at least!", "Warning", JOptionPane.ERROR_MESSAGE);

			return;

 		case 1:
 		case 2:
 		case 4:
 		case 8:
		default:
			switch(ConnectMode)
			{
			case 0://ç½‘å�£
                            res = ReaderAPI.Net_SetAntenna(hScanner[0], m_antenna_sel);
				break;
			case 1://RS232
                            res = ReaderAPI.SetAntenna(hScanner[0], m_antenna_sel, Address);
				break;

			}
			if (res!=ReaderAPI._OK)
			{
				//MessageBox("SetAntenna Fail!Please try again!","Warning",MB_ICONWARNING);
				JOptionPane.showMessageDialog(this, "SetAntenna Fail!Please try again!", "Warning", JOptionPane.ERROR_MESSAGE);
				return;
			}
			break;
                }



                for(i=0;i<5;i++)
		{

			switch(ConnectMode)
			{
			case 0://ç½‘å�£
                            res=ReaderAPI.Net_EPC1G2_WriteWordBlock(hScanner[0],EPC_Word,IDTemp,mem,ptr,len,mask,AccessPassword);
				break;
			case 1://
                            res=ReaderAPI.EPC1G2_WriteWordBlock(hScanner[0],EPC_Word,IDTemp,mem,ptr,len,mask,AccessPassword, Address);
                                break;
			}
			if ((res==ReaderAPI._OK))
				break;
		}
                if (res==ReaderAPI._OK)
                {
                    //m_ListData.AddString("Write Successfully!");
                    strTemp = "Write Successfully!";
                }
                else
                {
                    strTemp = "Write Error!";

                }

                //æ“�ä½œè¿™ä¸ªé›†å�ˆ
                hlistModel.add(hlistModel.getSize(), strTemp);
                //å°†è¿™ä¸ªé›†å�ˆæ·»åŠ åˆ°JListä¸­
                jList1.setModel(hlistModel);
                //jList1.setSelectedValue(nIDEvent, bFlag);

                jList1.setSelectedIndex(hlistModel.getSize()-1);




    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
//æ�€åˆ—æ ‡ç­¾ Kill tag
        String strTemp;
        int m_LAddress = 0;
        int m_LLen = 0;
        int m_mem = 0;//bank
        byte[] KillPassword = new byte[4];

        //å…ˆæ£€æŸ¥EPCæ˜¯å�¦å…ˆäº†
        if ( jComboBox2.getItemCount() < 1 ){
            //MessageBox("Please read first than choose a tag!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please read first than choose a tag!", "Warning", JOptionPane.ERROR_MESSAGE);
            return;
        }



        //è®¿é—®å¯†ç �
        //åˆ¤æ–­æ˜¯ä¸�æ˜¯16å­—ä¸²
        strTemp = jTextField8.getText();
        if ( !Utility.isHexString(strTemp)  ){
            //MessageBox("Please input HEX!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please input HEX!", "Warning", JOptionPane.ERROR_MESSAGE);
            jTextField8.grabFocus();
            return;
        }

        if ( strTemp.length() != 8 ){
            //MessageBox("Please input enough Length of AccessPassword!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please input enough Length of AccessPassword!", "Warning", JOptionPane.ERROR_MESSAGE);
            jTextField8.grabFocus();
            return;
        }

        //å°†å­—ç¬¦ä¸²å�˜ä¸ºå­—èŠ‚æ•°ç»„
        KillPassword = Utility.convert2HexArray(strTemp);



        //m_mem æŒ‡0---å¯†ç �ï¼Œ1---EPCï¼Œ2---TID, 3---USER
	mem=m_mem;
	ptr=m_LAddress;
	len=m_LLen;


        int CurSel=jComboBox2.getSelectedIndex();
	EPC_Word=EPCC1G2_IDBuffer[CurSel][0];

	for(int i=0;i<EPC_Word*2;i++){
            IDTemp[i]=EPCC1G2_IDBuffer[CurSel][i+1];
	}


        Object[] options = {"OK","Cancel"};
        int response=JOptionPane.showOptionDialog(this, "Are you sure to Kill the tag?", "Warning",JOptionPane.YES_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        if(response==0)
        {

        }
        else if(response==1)
        {
            //NO
            return;
        }



        int i = 0;
        int k = 0;
        byte[] bTmpAnt = new byte[4];
        m_antenna_sel=0;
        bTmpAnt[0] = 0;
        bTmpAnt[1] = 0;
        bTmpAnt[2] = 0;
        bTmpAnt[3] = 0;
        gAntenna[0] = 0;
        gAntenna[1] = 0;
        gAntenna[2] = 0;
        gAntenna[3] = 0;
        iModAnt	=	0;
        if(jCheckBox1.isSelected())
        {
                bTmpAnt[0] = 1;
                iModAnt++;
                m_antenna_sel += 1;
        }

        if(jCheckBox2.isSelected())
        {
                bTmpAnt[1] = 2;
                iModAnt++;
                m_antenna_sel += 2;
        }

        if(jCheckBox3.isSelected())
        {
                bTmpAnt[2] = 4;
                iModAnt++;
                m_antenna_sel += 4;
        }

        if(jCheckBox4.isSelected())
        {
                bTmpAnt[3] = 8;
                iModAnt++;
                m_antenna_sel += 8;
        }

        for (i = 0; i < 4; i++)
        {
                if ( bTmpAnt[i] != 0 )
                {
                        gAntenna[k]	=	bTmpAnt[i];
                        k++;
                }
        }


        switch(m_antenna_sel)
        {
        case 0:
                //MessageBox("Please choose one antenna at least!","Warning",MB_ICONWARNING);
                JOptionPane.showMessageDialog(this, "Please choose one antenna at least!", "Warning", JOptionPane.ERROR_MESSAGE);

                return;

        case 1:
        case 2:
        case 4:
        case 8:
        default:
                switch(ConnectMode)
                {
                case 0://ç½‘å�£
                    res = ReaderAPI.Net_SetAntenna(hScanner[0], m_antenna_sel);
                        break;
                case 1://RS232
                    res = ReaderAPI.SetAntenna(hScanner[0], m_antenna_sel, Address);
                        break;

                }
                if (res!=ReaderAPI._OK)
                {
                        //MessageBox("SetAntenna Fail!Please try again!","Warning",MB_ICONWARNING);
                        JOptionPane.showMessageDialog(this, "SetAntenna Fail!Please try again!", "Warning", JOptionPane.ERROR_MESSAGE);
                        return;
                }
                break;
        }



        for(i=0;i<5;i++)
        {

                switch(ConnectMode)
                {
                case 0://ç½‘å�£
                    res=ReaderAPI.Net_EPC1G2_KillTag(hScanner[0], EPC_Word, IDTemp, KillPassword);
                        break;
                case 1://
                    res=ReaderAPI.EPC1G2_KillTag(hScanner[0], EPC_Word, IDTemp, KillPassword, Address);
                        break;
                }
                if ((res==ReaderAPI._OK))
                        break;
        }
        if (res==ReaderAPI._OK)
        {
            JOptionPane.showMessageDialog(this, "Kill tag successfully!", "Notice", JOptionPane.INFORMATION_MESSAGE);
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Kill tag Fail!", "Warning", JOptionPane.ERROR_MESSAGE);

        }




    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
//USERåŒºæ•°æ�®ä¿�æŠ¤
        String strTemp;
        int m_LAddress = 0;
        int m_LLen = 0;
        int m_mem = 0;//bank
        

        //byte[] AccessPassword = new byte[4];

        //å…ˆæ£€æŸ¥EPCæ˜¯å�¦å…ˆäº†
        if ( jComboBox4.getItemCount() < 1 ){
            //MessageBox("Please read first than choose a tag!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please read first than choose a tag!", "Warning", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //èµ·åœ°
        strTemp = jTextField13.getText();
        m_LAddress = Integer.parseInt(strTemp);
        if ((m_LAddress<0) || (m_LAddress>2047))
	{
            //MessageBox("Please input Location of Tag Address between 0 and 2047!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please input Location of Tag Address between 0 and 2047!", "Warning", JOptionPane.ERROR_MESSAGE);
            jTextField13.grabFocus();
            return;

	}

        //è®¿é—®å¯†ç �
        //åˆ¤æ–­æ˜¯ä¸�æ˜¯16å­—ä¸²
        strTemp = jTextField14.getText();
        if ( !Utility.isHexString(strTemp)  ){
            //MessageBox("Please input HEX!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please input HEX!", "Warning", JOptionPane.ERROR_MESSAGE);
            jTextField14.grabFocus();
            return;
        }

        if ( strTemp.length() != 8 ){
            //MessageBox("Please input enough Length of AccessPassword!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please input enough Length of AccessPassword!", "Warning", JOptionPane.ERROR_MESSAGE);
            jTextField14.grabFocus();
            return;
        }

        //å°†å­—ç¬¦ä¸²å�˜ä¸ºå­—èŠ‚æ•°ç»„
        AccessPassword = Utility.convert2HexArray(strTemp);


	mem=m_mem;
	ptr=m_LAddress;
	len=m_LLen;


        int CurSel=jComboBox4.getSelectedIndex();
	EPC_Word=EPCC1G2_IDBuffer[CurSel][0];

	for(int i=0;i<EPC_Word*2;i++){
            IDTemp[i]=EPCC1G2_IDBuffer[CurSel][i+1];
	}


        Object[] options = {"OK","Cancel"};
        strTemp = String.format("Are you sure to set protect address %d of User?", m_LAddress);
        int response=JOptionPane.showOptionDialog(this, strTemp, "Warning",JOptionPane.YES_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        if(response==0)
        {

        }
        else if(response==1)
        {
            //NO
            return;
        }

        
        int i = 0;
        int k = 0;
        byte[] bTmpAnt = new byte[4];
        m_antenna_sel=0;
        bTmpAnt[0] = 0;
        bTmpAnt[1] = 0;
        bTmpAnt[2] = 0;
        bTmpAnt[3] = 0;
        gAntenna[0] = 0;
        gAntenna[1] = 0;
        gAntenna[2] = 0;
        gAntenna[3] = 0;
        iModAnt	=	0;
        if(jCheckBox1.isSelected())
        {
                bTmpAnt[0] = 1;
                iModAnt++;
                m_antenna_sel += 1;
        }

        if(jCheckBox2.isSelected())
        {
                bTmpAnt[1] = 2;
                iModAnt++;
                m_antenna_sel += 2;
        }

        if(jCheckBox3.isSelected())
        {
                bTmpAnt[2] = 4;
                iModAnt++;
                m_antenna_sel += 4;
        }

        if(jCheckBox4.isSelected())
        {
                bTmpAnt[3] = 8;
                iModAnt++;
                m_antenna_sel += 8;
        }

        for (i = 0; i < 4; i++)
        {
                if ( bTmpAnt[i] != 0 )
                {
                        gAntenna[k]	=	bTmpAnt[i];
                        k++;
                }
        }


        switch(m_antenna_sel)
        {
        case 0:
                //MessageBox("Please choose one antenna at least!","Warning",MB_ICONWARNING);
                JOptionPane.showMessageDialog(this, "Please choose one antenna at least!", "Warning", JOptionPane.ERROR_MESSAGE);

                return;

        case 1:
        case 2:
        case 4:
        case 8:
        default:
                switch(ConnectMode)
                {
                case 0://ç½‘å�£
                    res = ReaderAPI.Net_SetAntenna(hScanner[0], m_antenna_sel);
                        break;
                case 1://RS232
                    res = ReaderAPI.SetAntenna(hScanner[0], m_antenna_sel, Address);
                        break;

                }
                if (res!=ReaderAPI._OK)
                {
                        //MessageBox("SetAntenna Fail!Please try again!","Warning",MB_ICONWARNING);
                        JOptionPane.showMessageDialog(this, "SetAntenna Fail!Please try again!", "Warning", JOptionPane.ERROR_MESSAGE);
                        return;
                }
                break;
        }



        for(i=0;i<5;i++)
        {

                switch(ConnectMode)
                {
                case 0://ç½‘å�£
                    res=ReaderAPI.Net_EPC1G2_BlockLock(hScanner[0], EPC_Word, IDTemp, ptr, AccessPassword);
                        break;
                case 1://
                    res=ReaderAPI.EPC1G2_BlockLock(hScanner[0], EPC_Word, IDTemp, ptr, AccessPassword, Address);
                        break;
                }
                if ((res==ReaderAPI._OK))
                        break;
        }
        if (res==ReaderAPI._OK)
        {
            JOptionPane.showMessageDialog(this, "Set Protect successfully!", "Notice", JOptionPane.INFORMATION_MESSAGE);
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Set Protect Fail!", "Warning", JOptionPane.ERROR_MESSAGE);

        }


    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
//Killå¯†ç �ä¿�æŠ¤ï¼ŒEPC,TID,USERæ¨¡å¼�ä¿�æŠ¤
        String strTemp;
        int m_LAddress = 0;
        int m_LLen = 0;

        int m_mem = 0;//bank
        int m_Condition = 0;
        int m_Condition2 = 0;
        int m_Password = 0;
        int lock = 0;

        //byte[] AccessPassword = new byte[4];

        //å…ˆæ£€æŸ¥EPCæ˜¯å�¦å…ˆäº†
        if ( jComboBox6.getItemCount() < 1 ){
            //MessageBox("Please read first than choose a tag!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please read first than choose a tag!", "Warning", JOptionPane.ERROR_MESSAGE);
            return;
        }



        //è®¿é—®å¯†ç �
        //åˆ¤æ–­æ˜¯ä¸�æ˜¯16å­—ä¸²
        strTemp = jTextField16.getText();
        if ( !Utility.isHexString(strTemp)  ){
            //MessageBox("Please input HEX!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please input HEX!", "Warning", JOptionPane.ERROR_MESSAGE);
            jTextField16.grabFocus();
            return;
        }

        if ( strTemp.length() != 8 ){
            //MessageBox("Please input enough Length of AccessPassword!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please input enough Length of AccessPassword!", "Warning", JOptionPane.ERROR_MESSAGE);
            jTextField16.grabFocus();
            return;
        }

        //å°†å­—ç¬¦ä¸²å�˜ä¸ºå­—èŠ‚æ•°ç»„
        AccessPassword = Utility.convert2HexArray(strTemp);


        //m_mem æŒ‡0---å¯†ç �ï¼Œ1---EPCï¼Œ2---TID, 3---USER
        //0---å¯†ç �ï¼Œ 1---EPCï¼Œ 2---TIDï¼Œ 3---USER
        if ( jRadioButton10.isSelected() ){
            m_mem = 0;//bank
        }
        if ( jRadioButton11.isSelected() ){
            m_mem = 1;//bank
        }
        if ( jRadioButton12.isSelected() ){
            m_mem = 2;//bank
        }
        if ( jRadioButton13.isSelected() ){
            m_mem = 3;//bank
        }
	mem=m_mem;
	ptr=m_LAddress;
	len=m_LLen;


        int CurSel=jComboBox6.getSelectedIndex();
	EPC_Word=EPCC1G2_IDBuffer[CurSel][0];

	for(int i=0;i<EPC_Word*2;i++){
            IDTemp[i]=EPCC1G2_IDBuffer[CurSel][i+1];
	}


        Object[] options = {"OK","Cancel"};
        int response=JOptionPane.showOptionDialog(this, "Are you sure to protect this tag?", "Warning",JOptionPane.YES_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        if(response==0)
        {

        }
        else if(response==1)
        {
            //NO
            return;
        }

        if ( jRadioButton16.isSelected() ){
            m_Condition = 0;//
        }
        if ( jRadioButton17.isSelected() ){
            m_Condition = 1;//
        }
        if ( jRadioButton18.isSelected() ){
            m_Condition = 2;//
        }
        if ( jRadioButton19.isSelected() ){
            m_Condition = 3;//
        }

        if ( jRadioButton20.isSelected() ){
            m_Condition2 = 0;//
        }
        if ( jRadioButton21.isSelected() ){
            m_Condition2 = 1;//
        }
        if ( jRadioButton22.isSelected() ){
            m_Condition2 = 2;//
        }
        if ( jRadioButton23.isSelected() ){
            m_Condition2 = 3;//
        }


        //æ˜¯å“ªä¸ªå¯†ç �ï¼Œ0-Kill 1-Access
        if(jRadioButton14.isSelected()){
            //killé€‰ä¸­
            m_Password = 0;
        }
        if(jRadioButton15.isSelected()){
            //Accessé€‰ä¸­
            m_Password = 1;
        }

        if(m_mem == 0){
            //killé€‰ä¸­
            mem = m_Password;
            lock=m_Condition+4;
        }
        else {
            //Accessé€‰ä¸­
            mem=m_mem+1;
            lock=m_Condition2;
        }




        int i = 0;
        int k = 0;
        byte[] bTmpAnt = new byte[4];
        m_antenna_sel=0;
        bTmpAnt[0] = 0;
        bTmpAnt[1] = 0;
        bTmpAnt[2] = 0;
        bTmpAnt[3] = 0;
        gAntenna[0] = 0;
        gAntenna[1] = 0;
        gAntenna[2] = 0;
        gAntenna[3] = 0;
        iModAnt	=	0;
        if(jCheckBox1.isSelected())
        {
                bTmpAnt[0] = 1;
                iModAnt++;
                m_antenna_sel += 1;
        }

        if(jCheckBox2.isSelected())
        {
                bTmpAnt[1] = 2;
                iModAnt++;
                m_antenna_sel += 2;
        }

        if(jCheckBox3.isSelected())
        {
                bTmpAnt[2] = 4;
                iModAnt++;
                m_antenna_sel += 4;
        }

        if(jCheckBox4.isSelected())
        {
                bTmpAnt[3] = 8;
                iModAnt++;
                m_antenna_sel += 8;
        }

        for (i = 0; i < 4; i++)
        {
                if ( bTmpAnt[i] != 0 )
                {
                        gAntenna[k]	=	bTmpAnt[i];
                        k++;
                }
        }


        switch(m_antenna_sel)
        {
        case 0:
                //MessageBox("Please choose one antenna at least!","Warning",MB_ICONWARNING);
                JOptionPane.showMessageDialog(this, "Please choose one antenna at least!", "Warning", JOptionPane.ERROR_MESSAGE);

                return;

        case 1:
        case 2:
        case 4:
        case 8:
        default:
                switch(ConnectMode)
                {
                case 0://ç½‘å�£
                    res = ReaderAPI.Net_SetAntenna(hScanner[0], m_antenna_sel);
                        break;
                case 1://RS232
                    res = ReaderAPI.SetAntenna(hScanner[0], m_antenna_sel, Address);
                        break;

                }
                if (res!=ReaderAPI._OK)
                {
                        //MessageBox("SetAntenna Fail!Please try again!","Warning",MB_ICONWARNING);
                        JOptionPane.showMessageDialog(this, "SetAntenna Fail!Please try again!", "Warning", JOptionPane.ERROR_MESSAGE);
                        return;
                }
                break;
        }



        for(i=0;i<5;i++)
        {

                switch(ConnectMode)
                {
                case 0://ç½‘å�£
                    res=ReaderAPI.Net_EPC1G2_SetLock(hScanner[0], EPC_Word, IDTemp, mem, lock, AccessPassword);
                        break;
                case 1://
                    res=ReaderAPI.EPC1G2_SetLock(hScanner[0], EPC_Word, IDTemp, mem, lock, AccessPassword, Address);
                        break;
                }
                if ((res==ReaderAPI._OK))
                        break;
        }
        if (res==ReaderAPI._OK)
        {
            JOptionPane.showMessageDialog(this, "Set Lock successfully!", "Notice", JOptionPane.INFORMATION_MESSAGE);
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Set Lock Fail!", "Warning", JOptionPane.ERROR_MESSAGE);

        }

        
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
//EAS è®¾ç½®æŠ¥è­¦
        String strTemp;
        int m_LAddress = 0;
        int m_LLen = 0;
        int m_mem = 0;//bank
        int m_EasState = 0;
        
        //å…ˆæ£€æŸ¥EPCæ˜¯å�¦å…ˆäº†
        if ( jComboBox5.getItemCount() < 1 ){
            //MessageBox("Please read first than choose a tag!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please read first than choose a tag!", "Warning", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //è®¿é—®å¯†ç �
        //åˆ¤æ–­æ˜¯ä¸�æ˜¯16å­—ä¸²
        strTemp = jTextField15.getText();
        if ( !Utility.isHexString(strTemp)  ){
            //MessageBox("Please input HEX!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please input HEX!", "Warning", JOptionPane.ERROR_MESSAGE);
            jTextField15.grabFocus();
            return;
        }

        if ( strTemp.length() != 8 ){
            //MessageBox("Please input enough Length of AccessPassword!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please input enough Length of AccessPassword!", "Warning", JOptionPane.ERROR_MESSAGE);
            jTextField15.grabFocus();
            return;
        }

        //å°†å­—ç¬¦ä¸²å�˜ä¸ºå­—èŠ‚æ•°ç»„
        AccessPassword = Utility.convert2HexArray(strTemp);


	mem=m_mem;
	ptr=m_LAddress;
	len=m_LLen;


        int CurSel=jComboBox5.getSelectedIndex();
	EPC_Word=EPCC1G2_IDBuffer[CurSel][0];

	for(int i=0;i<EPC_Word*2;i++){
            IDTemp[i]=EPCC1G2_IDBuffer[CurSel][i+1];
	}

        
        //æ˜¯å“ªAlarm,no Alarm
        if(jRadioButton8.isSelected()){
            //No Alarm
            m_EasState = 0;
        }
        if(jRadioButton9.isSelected()){
            //Alarm
            m_EasState = 1;
        }

        
        int i = 0;
        int k = 0;
        byte[] bTmpAnt = new byte[4];
        m_antenna_sel=0;
        bTmpAnt[0] = 0;
        bTmpAnt[1] = 0;
        bTmpAnt[2] = 0;
        bTmpAnt[3] = 0;
        gAntenna[0] = 0;
        gAntenna[1] = 0;
        gAntenna[2] = 0;
        gAntenna[3] = 0;
        iModAnt	=	0;
        if(jCheckBox1.isSelected())
        {
                bTmpAnt[0] = 1;
                iModAnt++;
                m_antenna_sel += 1;
        }

        if(jCheckBox2.isSelected())
        {
                bTmpAnt[1] = 2;
                iModAnt++;
                m_antenna_sel += 2;
        }

        if(jCheckBox3.isSelected())
        {
                bTmpAnt[2] = 4;
                iModAnt++;
                m_antenna_sel += 4;
        }

        if(jCheckBox4.isSelected())
        {
                bTmpAnt[3] = 8;
                iModAnt++;
                m_antenna_sel += 8;
        }

        for (i = 0; i < 4; i++)
        {
                if ( bTmpAnt[i] != 0 )
                {
                        gAntenna[k]	=	bTmpAnt[i];
                        k++;
                }
        }


        switch(m_antenna_sel)
        {
        case 0:
                //MessageBox("Please choose one antenna at least!","Warning",MB_ICONWARNING);
                JOptionPane.showMessageDialog(this, "Please choose one antenna at least!", "Warning", JOptionPane.ERROR_MESSAGE);

                return;

        case 1:
        case 2:
        case 4:
        case 8:
        default:
                switch(ConnectMode)
                {
                case 0://ç½‘å�£
                    res = ReaderAPI.Net_SetAntenna(hScanner[0], m_antenna_sel);
                        break;
                case 1://RS232
                    res = ReaderAPI.SetAntenna(hScanner[0], m_antenna_sel, Address);
                        break;

                }
                if (res!=ReaderAPI._OK)
                {
                        //MessageBox("SetAntenna Fail!Please try again!","Warning",MB_ICONWARNING);
                        JOptionPane.showMessageDialog(this, "SetAntenna Fail!Please try again!", "Warning", JOptionPane.ERROR_MESSAGE);
                        return;
                }
                break;
        }



        for(i=0;i<5;i++)
        {

                switch(ConnectMode)
                {
                case 0://ç½‘å�£
                    res=ReaderAPI.Net_EPC1G2_ChangeEas(hScanner[0], EPC_Word, IDTemp, m_EasState, AccessPassword);
                        break;
                case 1://
                    res=ReaderAPI.EPC1G2_ChangeEas(hScanner[0], EPC_Word, IDTemp, m_EasState, AccessPassword, Address);
                        break;
                }
                if ((res==ReaderAPI._OK))
                        break;
        }
        if (res==ReaderAPI._OK)
        {
            JOptionPane.showMessageDialog(this, "Set Eas Alarm successfully!", "Notice", JOptionPane.INFORMATION_MESSAGE);
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Set Eas Alarm Fail!", "Warning", JOptionPane.ERROR_MESSAGE);

        }
        
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
//Read Lock è¯»é”�å®š
        String strTemp;
        int m_LAddress = 0;
        int m_LLen = 0;
        int m_mem = 0;//bank
        

        //å…ˆæ£€æŸ¥EPCæ˜¯å�¦å…ˆäº†
        if ( jComboBox7.getItemCount() < 1 ){
            //MessageBox("Please read first than choose a tag!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please read first than choose a tag!", "Warning", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //è®¿é—®å¯†ç �
        //åˆ¤æ–­æ˜¯ä¸�æ˜¯16å­—ä¸²
        strTemp = jTextField17.getText();
        if ( !Utility.isHexString(strTemp)  ){
            //MessageBox("Please input HEX!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please input HEX!", "Warning", JOptionPane.ERROR_MESSAGE);
            jTextField17.grabFocus();
            return;
        }

        if ( strTemp.length() != 8 ){
            //MessageBox("Please input enough Length of AccessPassword!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please input enough Length of AccessPassword!", "Warning", JOptionPane.ERROR_MESSAGE);
            jTextField17.grabFocus();
            return;
        }

        //å°†å­—ç¬¦ä¸²å�˜ä¸ºå­—èŠ‚æ•°ç»„
        AccessPassword = Utility.convert2HexArray(strTemp);


	mem=m_mem;
	ptr=m_LAddress;
	len=m_LLen;


        int CurSel=jComboBox7.getSelectedIndex();
	EPC_Word=EPCC1G2_IDBuffer[CurSel][0];

	for(int i=0;i<EPC_Word*2;i++){
            IDTemp[i]=EPCC1G2_IDBuffer[CurSel][i+1];
	}

        int i = 0;
        int k = 0;
        byte[] bTmpAnt = new byte[4];
        m_antenna_sel=0;
        bTmpAnt[0] = 0;
        bTmpAnt[1] = 0;
        bTmpAnt[2] = 0;
        bTmpAnt[3] = 0;
        gAntenna[0] = 0;
        gAntenna[1] = 0;
        gAntenna[2] = 0;
        gAntenna[3] = 0;
        iModAnt	=	0;
        if(jCheckBox1.isSelected())
        {
                bTmpAnt[0] = 1;
                iModAnt++;
                m_antenna_sel += 1;
        }

        if(jCheckBox2.isSelected())
        {
                bTmpAnt[1] = 2;
                iModAnt++;
                m_antenna_sel += 2;
        }

        if(jCheckBox3.isSelected())
        {
                bTmpAnt[2] = 4;
                iModAnt++;
                m_antenna_sel += 4;
        }

        if(jCheckBox4.isSelected())
        {
                bTmpAnt[3] = 8;
                iModAnt++;
                m_antenna_sel += 8;
        }

        for (i = 0; i < 4; i++)
        {
                if ( bTmpAnt[i] != 0 )
                {
                        gAntenna[k]	=	bTmpAnt[i];
                        k++;
                }
        }


        switch(m_antenna_sel)
        {
        case 0:
                //MessageBox("Please choose one antenna at least!","Warning",MB_ICONWARNING);
                JOptionPane.showMessageDialog(this, "Please choose one antenna at least!", "Warning", JOptionPane.ERROR_MESSAGE);

                return;

        case 1:
        case 2:
        case 4:
        case 8:
        default:
                switch(ConnectMode)
                {
                case 0://ç½‘å�£
                    res = ReaderAPI.Net_SetAntenna(hScanner[0], m_antenna_sel);
                        break;
                case 1://RS232
                    res = ReaderAPI.SetAntenna(hScanner[0], m_antenna_sel, Address);
                        break;

                }
                if (res!=ReaderAPI._OK)
                {
                        //MessageBox("SetAntenna Fail!Please try again!","Warning",MB_ICONWARNING);
                        JOptionPane.showMessageDialog(this, "SetAntenna Fail!Please try again!", "Warning", JOptionPane.ERROR_MESSAGE);
                        return;
                }
                break;
        }



        for(i=0;i<5;i++)
        {

                switch(ConnectMode)
                {
                case 0://ç½‘å�£
                    res=ReaderAPI.Net_EPC1G2_ReadProtect(hScanner[0], AccessPassword, EPC_Word, IDTemp);
                        break;
                case 1://
                    res=ReaderAPI.EPC1G2_ReadProtect(hScanner[0], AccessPassword, EPC_Word, IDTemp, Address);
                        break;
                }
                if ((res==ReaderAPI._OK))
                        break;
        }
        if (res==ReaderAPI._OK)
        {
            JOptionPane.showMessageDialog(this, "Read Protect successfully!", "Notice", JOptionPane.INFORMATION_MESSAGE);
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Read Protect Fail!", "Warning", JOptionPane.ERROR_MESSAGE);

        }

        
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
//Read Unlock å�–æ¶ˆè¯»é”�å®š
        String strTemp;
        int m_LAddress = 0;
        int m_LLen = 0;
        int m_mem = 0;//bank
        

        //å…ˆæ£€æŸ¥EPCæ˜¯å�¦å…ˆäº†
        if ( jComboBox7.getItemCount() < 1 ){
            //MessageBox("Please read first than choose a tag!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please read first than choose a tag!", "Warning", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //è®¿é—®å¯†ç �
        //åˆ¤æ–­æ˜¯ä¸�æ˜¯16å­—ä¸²
        strTemp = jTextField17.getText();
        if ( !Utility.isHexString(strTemp)  ){
            //MessageBox("Please input HEX!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please input HEX!", "Warning", JOptionPane.ERROR_MESSAGE);
            jTextField17.grabFocus();
            return;
        }

        if ( strTemp.length() != 8 ){
            //MessageBox("Please input enough Length of AccessPassword!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please input enough Length of AccessPassword!", "Warning", JOptionPane.ERROR_MESSAGE);
            jTextField17.grabFocus();
            return;
        }

        //å°†å­—ç¬¦ä¸²å�˜ä¸ºå­—èŠ‚æ•°ç»„
        AccessPassword = Utility.convert2HexArray(strTemp);


	mem=m_mem;
	ptr=m_LAddress;
	len=m_LLen;


        int CurSel=jComboBox7.getSelectedIndex();
	EPC_Word=EPCC1G2_IDBuffer[CurSel][0];

	for(int i=0;i<EPC_Word*2;i++){
            IDTemp[i]=EPCC1G2_IDBuffer[CurSel][i+1];
	}

        int i = 0;
        int k = 0;
        byte[] bTmpAnt = new byte[4];
        m_antenna_sel=0;
        bTmpAnt[0] = 0;
        bTmpAnt[1] = 0;
        bTmpAnt[2] = 0;
        bTmpAnt[3] = 0;
        gAntenna[0] = 0;
        gAntenna[1] = 0;
        gAntenna[2] = 0;
        gAntenna[3] = 0;
        iModAnt	=	0;
        if(jCheckBox1.isSelected())
        {
                bTmpAnt[0] = 1;
                iModAnt++;
                m_antenna_sel += 1;
        }

        if(jCheckBox2.isSelected())
        {
                bTmpAnt[1] = 2;
                iModAnt++;
                m_antenna_sel += 2;
        }

        if(jCheckBox3.isSelected())
        {
                bTmpAnt[2] = 4;
                iModAnt++;
                m_antenna_sel += 4;
        }

        if(jCheckBox4.isSelected())
        {
                bTmpAnt[3] = 8;
                iModAnt++;
                m_antenna_sel += 8;
        }

        for (i = 0; i < 4; i++)
        {
                if ( bTmpAnt[i] != 0 )
                {
                        gAntenna[k]	=	bTmpAnt[i];
                        k++;
                }
        }


        switch(m_antenna_sel)
        {
        case 0:
                //MessageBox("Please choose one antenna at least!","Warning",MB_ICONWARNING);
                JOptionPane.showMessageDialog(this, "Please choose one antenna at least!", "Warning", JOptionPane.ERROR_MESSAGE);

                return;

        case 1:
        case 2:
        case 4:
        case 8:
        default:
                switch(ConnectMode)
                {
                case 0://ç½‘å�£
                    res = ReaderAPI.Net_SetAntenna(hScanner[0], m_antenna_sel);
                        break;
                case 1://RS232
                    res = ReaderAPI.SetAntenna(hScanner[0], m_antenna_sel, Address);
                        break;

                }
                if (res!=ReaderAPI._OK)
                {
                        //MessageBox("SetAntenna Fail!Please try again!","Warning",MB_ICONWARNING);
                        JOptionPane.showMessageDialog(this, "SetAntenna Fail!Please try again!", "Warning", JOptionPane.ERROR_MESSAGE);
                        return;
                }
                break;
        }



        for(i=0;i<5;i++)
        {

                switch(ConnectMode)
                {
                case 0://ç½‘å�£
                    res=ReaderAPI.Net_EPC1G2_RStreadProtect(hScanner[0], AccessPassword);
                        break;
                case 1://
                    res=ReaderAPI.EPC1G2_RStreadProtect(hScanner[0], AccessPassword, Address);
                        break;
                }
                if ((res==ReaderAPI._OK))
                        break;
        }
        if (res==ReaderAPI._OK)
        {
            JOptionPane.showMessageDialog(this, "UnLockRead successfully!", "Notice", JOptionPane.INFORMATION_MESSAGE);
        }
        else
        {
            JOptionPane.showMessageDialog(this, "UnLockRead Fail!", "Warning", JOptionPane.ERROR_MESSAGE);

        }

        
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // TODO add your handling code here:
//åˆ—å‡ºæ ‡ç­¾
        String strTemp;
        int m_LAddress = 0;
        int m_LLen = 0;
        int m_mem = 0;//bank

        //1.å…ˆæŸ¥åœ°å�€
        strTemp = jTextField5.getText();
        m_LAddress = Integer.parseInt(strTemp);
        if ((m_LAddress<0) || (m_LAddress>2047))
	{
            //MessageBox("Please input Location of Tag Address between 0 and 2047!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please input Location of Tag Address between 0 and 2047!", "Warning", JOptionPane.ERROR_MESSAGE);
            jTextField5.grabFocus();
            jToggleButton1.setSelected(false);
            return;

	}

        //2.æŸ¥é•¿åº¦
        strTemp = jTextField6.getText();
        m_LLen = Integer.parseInt(strTemp);
        if ((m_LLen<0) || (m_LLen>2048))
	{
            //MessageBox("Please input Length of Tag Data between 0 and 2048!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please input Length of Tag Data between 0 and 2048!", "Warning", JOptionPane.ERROR_MESSAGE);
            jTextField6.grabFocus();
            jToggleButton1.setSelected(false);
            return;
	}

        //åˆ¤æ–­æ˜¯ä¸�æ˜¯16å­—ä¸²
        strTemp = jTextField7.getText();
        if ( !Utility.isHexString(strTemp) && !strTemp.isEmpty() ){
            //MessageBox("Please input HEX!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please input HEX!", "Warning", JOptionPane.ERROR_MESSAGE);
            jTextField7.grabFocus();
            jToggleButton1.setSelected(false);
            return;
        }

        mem=m_mem;
	ptr=m_LAddress;
	len=m_LLen;
        //å°†å­—ç¬¦ä¸²å�˜ä¸ºå­—èŠ‚æ•°ç»„
        mask = Utility.convert2HexArray(strTemp);

        int i;
        int [] interval = new int[]{10,20,30,50,100,200,500};
        timer_interval=interval[jComboBox1.getSelectedIndex()];

        nIDEvent = 1;//æ˜¯å“ªä¸ªäº‹IDå�·, åˆ—æ ‡ç­¾

        if ( jToggleButton1.isSelected() ){
            System.out.println("jToggleButton_Down!\n");

            int k = 0;
            byte[] bTmpAnt = new byte[4];
            m_antenna_sel=0;
            bTmpAnt[0] = 0;
            bTmpAnt[1] = 0;
            bTmpAnt[2] = 0;
            bTmpAnt[3] = 0;
            gAntenna[0] = 0;
            gAntenna[1] = 0;
            gAntenna[2] = 0;
            gAntenna[3] = 0;
            iModAnt	=	0;
            if(jCheckBox1.isSelected())
            {
                    bTmpAnt[0] = 1;
                    iModAnt++;
                    m_antenna_sel += 1;
            }

            if(jCheckBox2.isSelected())
            {
                    bTmpAnt[1] = 2;
                    iModAnt++;
                    m_antenna_sel += 2;
            }

            if(jCheckBox3.isSelected())
            {
                    bTmpAnt[2] = 4;
                    iModAnt++;
                    m_antenna_sel += 4;
            }

            if(jCheckBox4.isSelected())
            {
                    bTmpAnt[3] = 8;
                    iModAnt++;
                    m_antenna_sel += 8;
            }

            for (i = 0; i < 4; i++)
            {
                    if ( bTmpAnt[i] != 0 )
                    {
                            gAntenna[k]	=	bTmpAnt[i];
                            k++;
                    }
            }


		switch(m_antenna_sel)
		{
		case 0:
			//MessageBox("Please choose one antenna at least!","Warning",MB_ICONWARNING);
			JOptionPane.showMessageDialog(this, "Please choose one antenna at least!", "Warning", JOptionPane.ERROR_MESSAGE);

			return;

// 		case 1:
// 		case 2:
// 		case 4:
// 		case 8:
		default:
			switch(ConnectMode)
			{
			case 0://ç½‘å�£
                            res = ReaderAPI.Net_SetAntenna(hScanner[0], m_antenna_sel);
				break;
			case 1://RS232
                            res = ReaderAPI.SetAntenna(hScanner[0], m_antenna_sel, Address);
				break;

			}
			if (res!=ReaderAPI._OK)
			{
				//MessageBox("SetAntenna Fail!Please try again!","Warning",MB_ICONWARNING);
				JOptionPane.showMessageDialog(this, "SetAntenna Fail!Please try again!", "Warning", JOptionPane.ERROR_MESSAGE);
				return;
			}
			break;
		}


		//m_ListID.DeleteAllItems();
                //æ¸…é™¤è¡¨æ ¼ä¸­çš„å†…å®¹
                //DefaultTableModel tableModel = (DefaultTableModel)jTable1.get
                //tableModel.setRowCount(0);
                ((DefaultTableModel) jTable1.getModel()).getDataVector().clear();   //æ¸…é™¤è¡¨æ ¼æ•°æ�®
                ((DefaultTableModel) jTable1.getModel()).fireTableDataChanged();//é€šçŸ¥æ¨¡åž‹æ›´æ–°
                jTable1.updateUI();//åˆ·æ–°è¡¨æ ¼


		Read_times=0;

            //å¼€å�¯æ—¶é—´æ ‡å¿—
            running =   true;
            //start mytimer
            mytimer=new MyTimer();
            mytimer.setInterval(timer_interval);
            mytimer.start();

        }else {
            System.out.println("jToggleButton_Up!\n");
            //å…³é—­æ—¶é—´æ ‡å¿—
            running =   false;
            //start mytimer
            mytimer.setEnd(true);




            //kill tag
            jComboBox2.removeAllItems();

            //å�—çš„è¯»å†™
            jComboBox3.removeAllItems();

            //Set protect for reading or writing
            jComboBox6.removeAllItems();

            //Lock Block for User
            jComboBox4.removeAllItems();

            //Alarm
            jComboBox5.removeAllItems();

            //Read Protect
            jComboBox7.removeAllItems();


            //å°†è¡¨æ ¼æœ‰çš„æ•°æ�®åŠ è½½åˆ°è¡¨æ ¼ä¸­
            int k=jTable1.getRowCount();
		String str;
		byte[] temp = new byte[128];
		int ID_len;

		for(i=0;i<k;i++)
		{
                    //å�–ç¬¬iè¡Œç¬¬4åˆ—
                    strTemp = (String) jTable1.getValueAt(i, 4);
                    EPCC1G2_IDBuffer[i][0] = (byte)Integer.parseInt(strTemp, 16);
                    ID_len=EPCC1G2_IDBuffer[i][0]*2;


                    str="";
                    //å�–ç¬¬iè¡Œç¬¬4åˆ—
                    strTemp = (String) jTable1.getValueAt(i, 1);
                    temp = Utility.convert2HexArray(strTemp);

                    System.arraycopy(temp, 0, EPCC1G2_IDBuffer[i], 1, ID_len);

                    str =  String.format("%02d.",i+1);
                    str += strTemp;

                    //kill tag
                    jComboBox2.addItem(str);

                    //å�—çš„è¯»å†™
                    jComboBox3.addItem(str);

                    //Set protect for reading or writing
                    jComboBox6.addItem(str);

                    //Lock Block for User
                    jComboBox4.addItem(str);

                    //Alarm
                    jComboBox5.addItem(str);

                    //Read Protect
                    jComboBox7.addItem(str);

		}

                if (i != 0 && i == k){

                    jComboBox2.setSelectedIndex(0);
                    jComboBox3.setSelectedIndex(0);
                    jComboBox6.setSelectedIndex(0);
                    jComboBox4.setSelectedIndex(0);
                    jComboBox5.setSelectedIndex(0);
                    jComboBox7.setSelectedIndex(0);
                }



        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        // TODO add your handling code here:
//å�—è¯»
        String strTemp;
        int m_LAddress = 0;
        int m_LLen = 0;
        int m_mem = 0;//bank

        //å…ˆæ£€æŸ¥EPCæ˜¯å�¦å…ˆäº†
        if ( jComboBox3.getItemCount() < 1 ){
            //MessageBox("Please read first than choose a tag!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please read first than choose a tag!", "Warning", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //1.å…ˆæŸ¥åœ°å�€
        strTemp = jTextField9.getText();
        m_LAddress = Integer.parseInt(strTemp);
        if ((m_LAddress<0) || (m_LAddress>2047))
	{
            //MessageBox("Please input Location of Tag Address between 0 and 2047!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please input Location of Tag Address more then 0!", "Warning", JOptionPane.ERROR_MESSAGE);
            jTextField9.grabFocus();
            jToggleButton2.setSelected(false);
            return;
	}

        //2.æŸ¥é•¿åº¦
        strTemp = jTextField10.getText();
        m_LLen = Integer.parseInt(strTemp);
        if ((m_LLen<1) || (m_LLen>2048))
	{
            //MessageBox("Please input Length of Tag Data more than 1!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please input Length of Tag Data between 0 and 2048!", "Warning", JOptionPane.ERROR_MESSAGE);
            jTextField10.grabFocus();
            jToggleButton2.setSelected(false);
            return;
	}

        //0---å¯†ç �ï¼Œ 1---EPCï¼Œ 2---TIDï¼Œ 3---USER
        if ( jRadioButton4.isSelected() ){
            m_mem = 0;//bank
        }
        if ( jRadioButton5.isSelected() ){
            m_mem = 1;//bank
        }
        if ( jRadioButton6.isSelected() ){
            m_mem = 2;//bank
        }
        if ( jRadioButton7.isSelected() ){
            m_mem = 3;//bank
        }

        mem=m_mem;
        switch(mem)
	{
	case 0x00:
            if ((m_LLen<1) || (m_LLen>4)){
                JOptionPane.showMessageDialog(this, "Please input Length of Tag Data between 1 and 4 Word!", "Warning", JOptionPane.ERROR_MESSAGE);
                jTextField10.grabFocus();
                jToggleButton2.setSelected(false);
                return;
            }
            break;
        case 0x02:
            if ((m_LLen<1) || (m_LLen>64)){
                JOptionPane.showMessageDialog(this, "Please input Length of Tag Data between 1 and 8 Word!", "Warning", JOptionPane.ERROR_MESSAGE);
                jTextField10.grabFocus();
                jToggleButton2.setSelected(false);
                return;
            }
            break;
        case 0x01:
            if ((m_LLen<1) || (m_LLen>32)){
                JOptionPane.showMessageDialog(this, "Please input Length of Tag Data between 1 and 32 Word!", "Warning", JOptionPane.ERROR_MESSAGE);
                jTextField10.grabFocus();
                jToggleButton2.setSelected(false);
                return;
            }
            break;
        case 0x03:
            if ((m_LLen<1) || (m_LLen>128)){
                JOptionPane.showMessageDialog(this, "Please input Length of Tag Data between 1 and 128 Word!", "Warning", JOptionPane.ERROR_MESSAGE);
                jTextField10.grabFocus();
                jToggleButton2.setSelected(false);
                return;
            }
            break;
        }

        //è®¿é—®å¯†ç �
        //åˆ¤æ–­æ˜¯ä¸�æ˜¯16å­—ä¸²
        strTemp = jTextField11.getText();
        if ( !Utility.isHexString(strTemp) && !strTemp.isEmpty() ){
            //MessageBox("Please input HEX!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please input HEX!", "Warning", JOptionPane.ERROR_MESSAGE);
            jTextField7.grabFocus();
            jToggleButton1.setSelected(false);
            return;
        }

        if ( strTemp.length() != 8 ){
            //MessageBox("Please input enough Length of AccessPassword!","Warning",MB_ICONWARNING);
            JOptionPane.showMessageDialog(this, "Please input enough Length of AccessPassword!", "Warning", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //å°†å­—ç¬¦ä¸²å�˜ä¸ºå­—èŠ‚æ•°ç»„
        AccessPassword = Utility.convert2HexArray(strTemp);

        //m_mem æŒ‡0---å¯†ç �ï¼Œ1---EPCï¼Œ2---TID, 3---USER
	mem=m_mem;
	ptr=m_LAddress;
	len=m_LLen;

        int CurSel=jComboBox3.getSelectedIndex();
	EPC_Word=EPCC1G2_IDBuffer[CurSel][0];

	for(int i=0;i<EPC_Word*2;i++){
            IDTemp[i]=EPCC1G2_IDBuffer[CurSel][i+1];
	}


        int i;
        int [] interval = new int[]{10,20,30,50,100,200,500};
        timer_interval=interval[jComboBox1.getSelectedIndex()];

        nIDEvent = 2;//æ˜¯å“ªä¸ªäº‹IDå�·, åˆ—æ ‡ç­¾

        if ( jToggleButton2.isSelected() ){
            System.out.println("jToggleButton2_Down!\n");

            int k = 0;
            byte[] bTmpAnt = new byte[4];
            m_antenna_sel=0;
            bTmpAnt[0] = 0;
            bTmpAnt[1] = 0;
            bTmpAnt[2] = 0;
            bTmpAnt[3] = 0;
            gAntenna[0] = 0;
            gAntenna[1] = 0;
            gAntenna[2] = 0;
            gAntenna[3] = 0;
            iModAnt	=	0;
            if(jCheckBox1.isSelected())
            {
                    bTmpAnt[0] = 1;
                    iModAnt++;
                    m_antenna_sel += 1;
            }

            if(jCheckBox2.isSelected())
            {
                    bTmpAnt[1] = 2;
                    iModAnt++;
                    m_antenna_sel += 2;
            }

            if(jCheckBox3.isSelected())
            {
                    bTmpAnt[2] = 4;
                    iModAnt++;
                    m_antenna_sel += 4;
            }

            if(jCheckBox4.isSelected())
            {
                    bTmpAnt[3] = 8;
                    iModAnt++;
                    m_antenna_sel += 8;
            }

            for (i = 0; i < 4; i++)
            {
                    if ( bTmpAnt[i] != 0 )
                    {
                            gAntenna[k]	=	bTmpAnt[i];
                            k++;
                    }
            }


		switch(m_antenna_sel)
		{
		case 0:
			//MessageBox("Please choose one antenna at least!","Warning",MB_ICONWARNING);
			JOptionPane.showMessageDialog(this, "Please choose one antenna at least!", "Warning", JOptionPane.ERROR_MESSAGE);

			return;

 		case 1:
 		case 2:
 		case 4:
 		case 8:
		default:
			switch(ConnectMode)
			{
			case 0://ç½‘å�£
                            res = ReaderAPI.Net_SetAntenna(hScanner[0], m_antenna_sel);
				break;
			case 1://RS232
                            res = ReaderAPI.SetAntenna(hScanner[0], m_antenna_sel, Address);
				break;

			}
			if (res!=ReaderAPI._OK)
			{
				//MessageBox("SetAntenna Fail!Please try again!","Warning",MB_ICONWARNING);
				JOptionPane.showMessageDialog(this, "SetAntenna Fail!Please try again!", "Warning", JOptionPane.ERROR_MESSAGE);
				return;
			}
			break;
		}


		//m_ListID.DeleteAllItems();
                //æ¸…é™¤è¡¨æ ¼ä¸­çš„å†…å®¹
                //DefaultTableModel tableModel = (DefaultTableModel)jTable1.get
                //tableModel.setRowCount(0);

                jList1.removeAll();


		Read_times=0;

            //å¼€å�¯æ—¶é—´æ ‡å¿—
            running =   true;
            //start mytimer
            mytimer=new MyTimer();
            mytimer.setInterval(timer_interval);
            mytimer.start();

        }else {
            System.out.println("jToggleButton_Up!\n");
            //å…³é—­æ—¶é—´æ ‡å¿—
            running =   false;
            //start mytimer
            mytimer.setEnd(true);



        }
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
        // TODO add your handling code here:
//æ£€æµ‹EAS
        String strTemp;
        
        int i;
        int [] interval = new int[]{10,20,30,50,100,200,500};
        timer_interval=interval[jComboBox1.getSelectedIndex()];

        nIDEvent = 3;//æ˜¯å“ªä¸ªäº‹IDå�·, åˆ—æ ‡ç­¾

        if ( jToggleButton3.isSelected() ){
            System.out.println("jToggleButton_Down!\n");

            int k = 0;
            byte[] bTmpAnt = new byte[4];
            m_antenna_sel=0;
            bTmpAnt[0] = 0;
            bTmpAnt[1] = 0;
            bTmpAnt[2] = 0;
            bTmpAnt[3] = 0;
            gAntenna[0] = 0;
            gAntenna[1] = 0;
            gAntenna[2] = 0;
            gAntenna[3] = 0;
            iModAnt	=	0;
            if(jCheckBox1.isSelected())
            {
                    bTmpAnt[0] = 1;
                    iModAnt++;
                    m_antenna_sel += 1;
            }

            if(jCheckBox2.isSelected())
            {
                    bTmpAnt[1] = 2;
                    iModAnt++;
                    m_antenna_sel += 2;
            }

            if(jCheckBox3.isSelected())
            {
                    bTmpAnt[2] = 4;
                    iModAnt++;
                    m_antenna_sel += 4;
            }

            if(jCheckBox4.isSelected())
            {
                    bTmpAnt[3] = 8;
                    iModAnt++;
                    m_antenna_sel += 8;
            }

            for (i = 0; i < 4; i++)
            {
                    if ( bTmpAnt[i] != 0 )
                    {
                            gAntenna[k]	=	bTmpAnt[i];
                            k++;
                    }
            }


		switch(m_antenna_sel)
		{
		case 0:
			//MessageBox("Please choose one antenna at least!","Warning",MB_ICONWARNING);
			JOptionPane.showMessageDialog(this, "Please choose one antenna at least!", "Warning", JOptionPane.ERROR_MESSAGE);

			return;

// 		case 1:
// 		case 2:
// 		case 4:
// 		case 8:
		default:
			switch(ConnectMode)
			{
			case 0://ç½‘å�£
                            res = ReaderAPI.Net_SetAntenna(hScanner[0], m_antenna_sel);
				break;
			case 1://RS232
                            res = ReaderAPI.SetAntenna(hScanner[0], m_antenna_sel, Address);
				break;

			}
			if (res!=ReaderAPI._OK)
			{
				//MessageBox("SetAntenna Fail!Please try again!","Warning",MB_ICONWARNING);
				JOptionPane.showMessageDialog(this, "SetAntenna Fail!Please try again!", "Warning", JOptionPane.ERROR_MESSAGE);
				return;
			}
			break;
		}



		Read_times=0;

            //å¼€å�¯æ—¶é—´æ ‡å¿—
            running =   true;
            //start mytimer
            mytimer=new MyTimer();
            mytimer.setInterval(timer_interval);
            mytimer.start();

        }else {
            System.out.println("jToggleButton_Up!\n");
            //å…³é—­æ—¶é—´æ ‡å¿—
            running =   false;
            //start mytimer
            mytimer.setEnd(true);



        }
        
        
    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void jToggleButtonAutoTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonAutoTestActionPerformed
        // TODO add your handling code here:
//è‡ªåŠ¨è¾“å‡ºå¼€å�¯ä¸Žå…³é—­
        
        int i =0;
        
        if ( jToggleButtonAutoTest.isSelected() ){
            System.out.println("jToggleButtonAutoTest_Down!\n");
            for ( i = 0; i < 5; i++){
                switch(ConnectMode)
                {
                    case 0://ç½‘å�£
                        res=ReaderAPI.Net_AutoMode(hScanner[0], 1);
                            break;
                    case 1://RS232
                        res=ReaderAPI.AutoMode(hScanner[0], 1, Address);
                            break;

                }
                if (res==ReaderAPI._OK){
                    break;
                }
                
                
                
                
            
            }
            if (res==ReaderAPI._OK){
                
                switch(ConnectMode)
                {
                    case 0://ç½‘å�£
                        //JOptionPane.showMessageDialog(this, "Start AutoMode Success!", "Notice", JOptionPane.INFORMATION_MESSAGE);
                        if (bound==false){
                            try {  
                                channel = DatagramChannel.open();  
                                socket = channel.socket();  
                                channel.configureBlocking(false); 
                            } catch (Exception e) {  
                                e.printStackTrace();  
                            }  

                        }
                        iTagNumber = 0;//autoä¸‹çš„tagçš„ä¸ªæ•°
                        jLabelAutoTestTagNumValue.setText("");
                        jTextAreaAuto.setText("");
                        mytimerAuto=new MyTimerAuto();
                        mytimerAuto.start();
                            break;
                        
                    case 1://RS232
                        iTagNumber = 0;//autoä¸‹çš„tagçš„ä¸ªæ•°
                        jLabelAutoTestTagNumValue.setText("");
                        jTextAreaAuto.setText("");
                        mytimerSerialAuto=new MyTimerSerialAuto();
                        mytimerSerialAuto.start();
                            break;

                }
                
                
                
            }
            else{
                
                JOptionPane.showMessageDialog(this, "Start AutoMode Fail!Please try again!", "Warning", JOptionPane.ERROR_MESSAGE);
                
            }
        }
        else{
            System.out.println("jToggleButtonAutoTest_Up!\n");
            for ( i = 0; i < 5; i++){
                switch(ConnectMode)
                {
                    case 0://ç½‘å�£
                        res=ReaderAPI.Net_AutoMode(hScanner[0], 0);
                            break;
                    case 1://RS232
                        
                try {
                    mytimerSerialAuto.setEnd(true);
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(JDialogDemo.class.getName()).log(Level.SEVERE, null, ex);
                }
                        res=ReaderAPI.AutoMode(hScanner[0], 0, Address);
                            break;

                }
                if (res==ReaderAPI._OK){
                    break;
                }
            }
            if (res==ReaderAPI._OK){
                
                //JOptionPane.showMessageDialog(this, "Stop AutoMode Success!", "Notice", JOptionPane.INFORMATION_MESSAGE);
                //bound = false;
                
                mytimerAuto.setEnd(true);
            }
            else{
                
                JOptionPane.showMessageDialog(this, "Stop AutoMode Fail!Please try again!", "Warning", JOptionPane.ERROR_MESSAGE);
                
            }
            
            
            
            
        }
    }//GEN-LAST:event_jToggleButtonAutoTestActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
        //System.out.println("jRadioButton1ActionPerformed!\n");
        jComboBox_ports.setEnabled(false);
        
        jTextField1.setEnabled(true);
        jTextField2.setEnabled(true);
        jTextField3.setEnabled(true);
        jTextField4.setEnabled(true);
        
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
        //System.out.println("jRadioButton2ActionPerformed!\n");
        jComboBox_ports.setEnabled(true);
        
        jTextField1.setEnabled(false);
        jTextField2.setEnabled(false);
        jTextField3.setEnabled(false);
        jTextField4.setEnabled(false);
        
    }//GEN-LAST:event_jRadioButton2ActionPerformed



    private void connectButtonFunc() {
        ConnectMode =   -1;////è¿žæŽ¥çš„æ¨¡å¼�,0---ç½‘å�£ï¼Œ1---RS232ï¼Œ2---RS485
        if ( jRadioButton1.isSelected() ){
	// é€‰é¡¹äº†TCP/IP
            ConnectMode =   0;

        }else if ( jRadioButton2.isSelected() ) {
        //ä¸²å�£
            ConnectMode =   1;
        }else {
            return;
        }

        int i = 0;
        int[] nBaudRate = new int[1];
        //ReaderAPI.writeLog("", " Starting... ");
        String strHostIp;//host ip
        String strReaderIp;//Readerip
        String strTemp;
        String strComm;

        strHostIp   =   jTextField3.getText();//Host IP
        strTemp     =   jTextField4.getText();//host port
        m_HostPort  =   Integer.parseInt(strTemp);

        strReaderIp   =   jTextField1.getText();//Reader IP
        strTemp     =   jTextField2.getText();//Reader port
        m_Port  =   Integer.parseInt(strTemp);

        strComm = jComboBox_ports.getSelectedItem().toString();

        switch (ConnectMode){
            case 0://ç½‘å�£
                //iRet = ReaderAPI.Net_ConnectScanner(hScanner, "192.168.0.103", 1969, "192.168.0.71", 5555);
                res = ReaderAPI.Net_ConnectScanner(hScanner, strReaderIp, m_Port, strHostIp, m_HostPort);
                break;
            case 1://ä¸²å�£
                //res = ReaderAPI.ConnectScanner(hScanner, "COM7", nBaudRate);
                res = ReaderAPI.ConnectScanner(hScanner, strComm, nBaudRate);
                break;
        }
        if (res==ReaderAPI._OK){
            //è¿žä¸Šäº†ï¼Œé€‰æ‹©å“ªä¸ªæ¨¡å¼�é€šè¿…å�˜æ�¢
            short[] HandVer = new short[1];
            short[] SoftVer = new short[1];

            for (i = 0; i < 5; i++)
		{
                    //å�–å“ªä¸ªç‰ˆæœ¬
                    switch(ConnectMode)
                    {
                    case 0://ç½‘å�£
                        res = ReaderAPI.Net_GetReaderVersion(hScanner[0], HandVer, SoftVer);
                            break;
                    case 1://RS232
                        res = ReaderAPI.GetReaderVersion(hScanner[0], HandVer, SoftVer, Address);
                            break;

                    }

                    if ( res == ReaderAPI._OK )
                    {
                            break;
                    }

		}
		if (res!=ReaderAPI._OK)
		{
			//MessageBox("Connect Reader Fail!(Version)","Warning",MB_ICONWARNING);
			JOptionPane.showMessageDialog(this, "Connect Reader Fail!(Version)", "Warning", JOptionPane.ERROR_MESSAGE);
			//è°ƒå…³é—­
			return;
		}


            byte [] gBasicParam = new byte[32];
            for (i = 0; i < 5; i++)
            {
                //å�–åŸºæœ¬å�‚æ•°
                switch(ConnectMode)
                {
                case 0://ç½‘å�£
                    res=ReaderAPI.Net_ReadBasicParam(hScanner[0], gBasicParam);
                        break;
                case 1://RS232
                    res=ReaderAPI.ReadBasicParam(hScanner[0], gBasicParam, Address);
                        break;

                }

                if ( res == ReaderAPI._OK )
                {
                        break;
                }


            }
            if (res!=ReaderAPI._OK)
            {

                    //MessageBox("Connect Reader Fail!(BasicParam)","Warring",MB_ICONWARNING);
                    JOptionPane.showMessageDialog(this, "Connect Reader Fail!(BasicParam)", "Warning", JOptionPane.ERROR_MESSAGE);
                    //è°ƒå…³é—­
                    return;
            }

            
            
            byte [] gAutoParam = new byte[32];
            for (i = 0; i < 5; i++)
            {
                //å�–åŸºæœ¬å�‚æ•°
                switch(ConnectMode)
                {
                case 0://ç½‘å�£
                    res=ReaderAPI.Net_ReadAutoParam(hScanner[0], gAutoParam);
                        break;
                case 1://RS232
                    res=ReaderAPI.ReadAutoParam(hScanner[0], gAutoParam, Address);
                        break;

                }

                if ( res == ReaderAPI._OK )
                {
                        iHostPort = (int)(((int)gAutoParam[21])<<8)+(int)gAutoParam[22]; //auto host port
                        break;
                }


            }
            if (res!=ReaderAPI._OK)
            {

                    //MessageBox("Connect Reader Fail!(BasicParam)","Warring",MB_ICONWARNING);
                    JOptionPane.showMessageDialog(this, "Connect Reader Fail!(BasicParam)", "Warning", JOptionPane.ERROR_MESSAGE);
                    //è°ƒå…³é—­
                    return;
            }
            
            
            
            ifConnectReader=1;
            NewConnect=1;

            // è¿žæŽ¥æŒ‰é’®å’Œæ–­å¼€æŒ‰é’®
            jButton_connect.setEnabled(false);
            jButton_disconnect.setEnabled(true);

            //MessageBox("Connect Reader Success!","Notice",MB_ICONINFORMATION);
            JOptionPane.showMessageDialog(this, "Connect Reader Success!", "Notice", JOptionPane.INFORMATION_MESSAGE);
            jTabbedPane.setSelectedComponent(jPanel_ISO18000_6C);
            //æ›´æ–°å¤–è´­çŠ¶æ€�
            UpdateStatus();



        }else {
            //è¿žæŽ¥å¤±è´¥
            JOptionPane.showMessageDialog(this, "Connect Reader Fail!", "Warning", JOptionPane.ERROR_MESSAGE);

        }



    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDialogDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDialogDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDialogDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDialogDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>



        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                int i = 0;
                JDialogDemo dialog = new JDialogDemo(new javax.swing.JFrame(), true);
                dialog.buttonGroup1.add (dialog.jRadioButton1);
                dialog.buttonGroup1.add (dialog.jRadioButton2);
                dialog.jRadioButton1.setSelected(true);

		// è¿žæŽ¥æŒ‰é’®å’Œæ–­å¼€æŒ‰é’®
		dialog.jButton_connect.setEnabled(true);
                dialog.jButton_disconnect.setEnabled(false);





				// è®¾ç½®çª—ä½“å¤§å°�
                //int windowsWedth = 600;
                //int windowsHeight = 600;

				// å¾—åˆ°æ˜¾ç¤ºå™¨å±�å¹•çš„å®½é«˜
                //int width = Toolkit.getDefaultToolkit().getScreenSize().width;
                //int height = Toolkit.getDefaultToolkit().getScreenSize().height;







                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });

				// èŽ·å¾—å±�å¹•å¤§å°�
                Dimension s = Toolkit.getDefaultToolkit().getScreenSize();
				// èŽ·å¾—çª—ä½“å¤§å°�
                Dimension d = dialog.getSize();
				// è®¡ç®—å±…ä¸­çš„ä½�ç½®
				dialog.setLocation((s.width - d.width) / 2,
						(s.height - d.height) / 2);

                dialog.setVisible(true);
            }


        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.ButtonGroup buttonGroup7;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton jButton_connect;
    private javax.swing.JButton jButton_disconnect;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JComboBox jComboBox5;
    private javax.swing.JComboBox jComboBox6;
    private javax.swing.JComboBox jComboBox7;
    private javax.swing.JComboBox jComboBox_ports;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelAutoTestTagNum;
    private javax.swing.JLabel jLabelAutoTestTagNumValue;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanel_AutoTest;
    private javax.swing.JPanel jPanel_ISO18000_6C;
    private javax.swing.JPanel jPanel_connect;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton10;
    private javax.swing.JRadioButton jRadioButton11;
    private javax.swing.JRadioButton jRadioButton12;
    private javax.swing.JRadioButton jRadioButton13;
    private javax.swing.JRadioButton jRadioButton14;
    private javax.swing.JRadioButton jRadioButton15;
    private javax.swing.JRadioButton jRadioButton16;
    private javax.swing.JRadioButton jRadioButton17;
    private javax.swing.JRadioButton jRadioButton18;
    private javax.swing.JRadioButton jRadioButton19;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton20;
    private javax.swing.JRadioButton jRadioButton21;
    private javax.swing.JRadioButton jRadioButton22;
    private javax.swing.JRadioButton jRadioButton23;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JRadioButton jRadioButton7;
    private javax.swing.JRadioButton jRadioButton8;
    private javax.swing.JRadioButton jRadioButton9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextAreaAuto;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField16;
    private javax.swing.JTextField jTextField17;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JToggleButton jToggleButtonAutoTest;
    // End of variables declaration//GEN-END:variables
}
